
NTI_CCGroup.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  000023c0  00002454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800178  00800178  0000256c  2**0
                  ALLOC
  3 .stab         00004050  00000000  00000000  0000256c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001b21  00000000  00000000  000065bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000080dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b6  00000000  00000000  0000823d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f0d  00000000  00000000  000083f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010d2  00000000  00000000  0000a300  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001030  00000000  00000000  0000b3d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000c404  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002e6  00000000  00000000  0000c584  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008f6  00000000  00000000  0000c86a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d160  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ec       	ldi	r30, 0xC0	; 192
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 38       	cpi	r26, 0x87	; 135
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 13 11 	call	0x2226	; 0x2226 <main>
      8a:	0c 94 de 11 	jmp	0x23bc	; 0x23bc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a7 11 	jmp	0x234e	; 0x234e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c3 11 	jmp	0x2386	; 0x2386 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b3 11 	jmp	0x2366	; 0x2366 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 cf 11 	jmp	0x239e	; 0x239e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b3 11 	jmp	0x2366	; 0x2366 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 cf 11 	jmp	0x239e	; 0x239e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a7 11 	jmp	0x234e	; 0x234e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c3 11 	jmp	0x2386	; 0x2386 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 af 11 	jmp	0x235e	; 0x235e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 b3 11 	jmp	0x2366	; 0x2366 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 cf 11 	jmp	0x239e	; 0x239e <__epilogue_restores__+0x18>

000007ea <__fixsfsi>:
     7ea:	ac e0       	ldi	r26, 0x0C	; 12
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 b7 11 	jmp	0x236e	; 0x236e <__prologue_saves__+0x20>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	be 01       	movw	r22, r28
     804:	6b 5f       	subi	r22, 0xFB	; 251
     806:	7f 4f       	sbci	r23, 0xFF	; 255
     808:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     80c:	8d 81       	ldd	r24, Y+5	; 0x05
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	61 f1       	breq	.+88     	; 0x86a <__stack+0xb>
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	50 f1       	brcs	.+84     	; 0x86a <__stack+0xb>
     816:	84 30       	cpi	r24, 0x04	; 4
     818:	21 f4       	brne	.+8      	; 0x822 <__fixsfsi+0x38>
     81a:	8e 81       	ldd	r24, Y+6	; 0x06
     81c:	88 23       	and	r24, r24
     81e:	51 f1       	breq	.+84     	; 0x874 <__stack+0x15>
     820:	2e c0       	rjmp	.+92     	; 0x87e <__stack+0x1f>
     822:	2f 81       	ldd	r18, Y+7	; 0x07
     824:	38 85       	ldd	r19, Y+8	; 0x08
     826:	37 fd       	sbrc	r19, 7
     828:	20 c0       	rjmp	.+64     	; 0x86a <__stack+0xb>
     82a:	6e 81       	ldd	r22, Y+6	; 0x06
     82c:	2f 31       	cpi	r18, 0x1F	; 31
     82e:	31 05       	cpc	r19, r1
     830:	1c f0       	brlt	.+6      	; 0x838 <__fixsfsi+0x4e>
     832:	66 23       	and	r22, r22
     834:	f9 f0       	breq	.+62     	; 0x874 <__stack+0x15>
     836:	23 c0       	rjmp	.+70     	; 0x87e <__stack+0x1f>
     838:	8e e1       	ldi	r24, 0x1E	; 30
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	82 1b       	sub	r24, r18
     83e:	93 0b       	sbc	r25, r19
     840:	29 85       	ldd	r18, Y+9	; 0x09
     842:	3a 85       	ldd	r19, Y+10	; 0x0a
     844:	4b 85       	ldd	r20, Y+11	; 0x0b
     846:	5c 85       	ldd	r21, Y+12	; 0x0c
     848:	04 c0       	rjmp	.+8      	; 0x852 <__fixsfsi+0x68>
     84a:	56 95       	lsr	r21
     84c:	47 95       	ror	r20
     84e:	37 95       	ror	r19
     850:	27 95       	ror	r18
     852:	8a 95       	dec	r24
     854:	d2 f7       	brpl	.-12     	; 0x84a <__fixsfsi+0x60>
     856:	66 23       	and	r22, r22
     858:	b1 f0       	breq	.+44     	; 0x886 <__stack+0x27>
     85a:	50 95       	com	r21
     85c:	40 95       	com	r20
     85e:	30 95       	com	r19
     860:	21 95       	neg	r18
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	4f 4f       	sbci	r20, 0xFF	; 255
     866:	5f 4f       	sbci	r21, 0xFF	; 255
     868:	0e c0       	rjmp	.+28     	; 0x886 <__stack+0x27>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	09 c0       	rjmp	.+18     	; 0x886 <__stack+0x27>
     874:	2f ef       	ldi	r18, 0xFF	; 255
     876:	3f ef       	ldi	r19, 0xFF	; 255
     878:	4f ef       	ldi	r20, 0xFF	; 255
     87a:	5f e7       	ldi	r21, 0x7F	; 127
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e8       	ldi	r21, 0x80	; 128
     886:	b9 01       	movw	r22, r18
     888:	ca 01       	movw	r24, r20
     88a:	2c 96       	adiw	r28, 0x0c	; 12
     88c:	e2 e0       	ldi	r30, 0x02	; 2
     88e:	0c 94 d3 11 	jmp	0x23a6	; 0x23a6 <__epilogue_restores__+0x20>

00000892 <__floatunsisf>:
     892:	a8 e0       	ldi	r26, 0x08	; 8
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	ef e4       	ldi	r30, 0x4F	; 79
     898:	f4 e0       	ldi	r31, 0x04	; 4
     89a:	0c 94 af 11 	jmp	0x235e	; 0x235e <__prologue_saves__+0x10>
     89e:	7b 01       	movw	r14, r22
     8a0:	8c 01       	movw	r16, r24
     8a2:	61 15       	cp	r22, r1
     8a4:	71 05       	cpc	r23, r1
     8a6:	81 05       	cpc	r24, r1
     8a8:	91 05       	cpc	r25, r1
     8aa:	19 f4       	brne	.+6      	; 0x8b2 <__floatunsisf+0x20>
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	89 83       	std	Y+1, r24	; 0x01
     8b0:	60 c0       	rjmp	.+192    	; 0x972 <__floatunsisf+0xe0>
     8b2:	83 e0       	ldi	r24, 0x03	; 3
     8b4:	89 83       	std	Y+1, r24	; 0x01
     8b6:	8e e1       	ldi	r24, 0x1E	; 30
     8b8:	c8 2e       	mov	r12, r24
     8ba:	d1 2c       	mov	r13, r1
     8bc:	dc 82       	std	Y+4, r13	; 0x04
     8be:	cb 82       	std	Y+3, r12	; 0x03
     8c0:	ed 82       	std	Y+5, r14	; 0x05
     8c2:	fe 82       	std	Y+6, r15	; 0x06
     8c4:	0f 83       	std	Y+7, r16	; 0x07
     8c6:	18 87       	std	Y+8, r17	; 0x08
     8c8:	c8 01       	movw	r24, r16
     8ca:	b7 01       	movw	r22, r14
     8cc:	0e 94 c2 04 	call	0x984	; 0x984 <__clzsi2>
     8d0:	fc 01       	movw	r30, r24
     8d2:	31 97       	sbiw	r30, 0x01	; 1
     8d4:	f7 ff       	sbrs	r31, 7
     8d6:	3b c0       	rjmp	.+118    	; 0x94e <__floatunsisf+0xbc>
     8d8:	22 27       	eor	r18, r18
     8da:	33 27       	eor	r19, r19
     8dc:	2e 1b       	sub	r18, r30
     8de:	3f 0b       	sbc	r19, r31
     8e0:	57 01       	movw	r10, r14
     8e2:	68 01       	movw	r12, r16
     8e4:	02 2e       	mov	r0, r18
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__floatunsisf+0x5e>
     8e8:	d6 94       	lsr	r13
     8ea:	c7 94       	ror	r12
     8ec:	b7 94       	ror	r11
     8ee:	a7 94       	ror	r10
     8f0:	0a 94       	dec	r0
     8f2:	d2 f7       	brpl	.-12     	; 0x8e8 <__floatunsisf+0x56>
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	a0 e0       	ldi	r26, 0x00	; 0
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	04 c0       	rjmp	.+8      	; 0x90e <__floatunsisf+0x7c>
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	aa 1f       	adc	r26, r26
     90c:	bb 1f       	adc	r27, r27
     90e:	2a 95       	dec	r18
     910:	d2 f7       	brpl	.-12     	; 0x906 <__floatunsisf+0x74>
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	a1 09       	sbc	r26, r1
     916:	b1 09       	sbc	r27, r1
     918:	8e 21       	and	r24, r14
     91a:	9f 21       	and	r25, r15
     91c:	a0 23       	and	r26, r16
     91e:	b1 23       	and	r27, r17
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	a1 05       	cpc	r26, r1
     924:	b1 05       	cpc	r27, r1
     926:	21 f0       	breq	.+8      	; 0x930 <__floatunsisf+0x9e>
     928:	41 e0       	ldi	r20, 0x01	; 1
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	4a 29       	or	r20, r10
     932:	5b 29       	or	r21, r11
     934:	6c 29       	or	r22, r12
     936:	7d 29       	or	r23, r13
     938:	4d 83       	std	Y+5, r20	; 0x05
     93a:	5e 83       	std	Y+6, r21	; 0x06
     93c:	6f 83       	std	Y+7, r22	; 0x07
     93e:	78 87       	std	Y+8, r23	; 0x08
     940:	8e e1       	ldi	r24, 0x1E	; 30
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	8e 1b       	sub	r24, r30
     946:	9f 0b       	sbc	r25, r31
     948:	9c 83       	std	Y+4, r25	; 0x04
     94a:	8b 83       	std	Y+3, r24	; 0x03
     94c:	12 c0       	rjmp	.+36     	; 0x972 <__floatunsisf+0xe0>
     94e:	30 97       	sbiw	r30, 0x00	; 0
     950:	81 f0       	breq	.+32     	; 0x972 <__floatunsisf+0xe0>
     952:	0e 2e       	mov	r0, r30
     954:	04 c0       	rjmp	.+8      	; 0x95e <__floatunsisf+0xcc>
     956:	ee 0c       	add	r14, r14
     958:	ff 1c       	adc	r15, r15
     95a:	00 1f       	adc	r16, r16
     95c:	11 1f       	adc	r17, r17
     95e:	0a 94       	dec	r0
     960:	d2 f7       	brpl	.-12     	; 0x956 <__floatunsisf+0xc4>
     962:	ed 82       	std	Y+5, r14	; 0x05
     964:	fe 82       	std	Y+6, r15	; 0x06
     966:	0f 83       	std	Y+7, r16	; 0x07
     968:	18 87       	std	Y+8, r17	; 0x08
     96a:	ce 1a       	sub	r12, r30
     96c:	df 0a       	sbc	r13, r31
     96e:	dc 82       	std	Y+4, r13	; 0x04
     970:	cb 82       	std	Y+3, r12	; 0x03
     972:	1a 82       	std	Y+2, r1	; 0x02
     974:	ce 01       	movw	r24, r28
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     97c:	28 96       	adiw	r28, 0x08	; 8
     97e:	ea e0       	ldi	r30, 0x0A	; 10
     980:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <__epilogue_restores__+0x10>

00000984 <__clzsi2>:
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	7b 01       	movw	r14, r22
     98e:	8c 01       	movw	r16, r24
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	e8 16       	cp	r14, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	f8 06       	cpc	r15, r24
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	08 07       	cpc	r16, r24
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	18 07       	cpc	r17, r24
     9a0:	88 f4       	brcc	.+34     	; 0x9c4 <__clzsi2+0x40>
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	e8 16       	cp	r14, r24
     9a6:	f1 04       	cpc	r15, r1
     9a8:	01 05       	cpc	r16, r1
     9aa:	11 05       	cpc	r17, r1
     9ac:	31 f0       	breq	.+12     	; 0x9ba <__clzsi2+0x36>
     9ae:	28 f0       	brcs	.+10     	; 0x9ba <__clzsi2+0x36>
     9b0:	88 e0       	ldi	r24, 0x08	; 8
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a0 e0       	ldi	r26, 0x00	; 0
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	17 c0       	rjmp	.+46     	; 0x9e8 <__clzsi2+0x64>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	a0 e0       	ldi	r26, 0x00	; 0
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	12 c0       	rjmp	.+36     	; 0x9e8 <__clzsi2+0x64>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	e8 16       	cp	r14, r24
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	f8 06       	cpc	r15, r24
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	08 07       	cpc	r16, r24
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	18 07       	cpc	r17, r24
     9d4:	28 f0       	brcs	.+10     	; 0x9e0 <__clzsi2+0x5c>
     9d6:	88 e1       	ldi	r24, 0x18	; 24
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	a0 e0       	ldi	r26, 0x00	; 0
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__clzsi2+0x64>
     9e0:	80 e1       	ldi	r24, 0x10	; 16
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a0 e0       	ldi	r26, 0x00	; 0
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	20 e2       	ldi	r18, 0x20	; 32
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	28 1b       	sub	r18, r24
     9f2:	39 0b       	sbc	r19, r25
     9f4:	4a 0b       	sbc	r20, r26
     9f6:	5b 0b       	sbc	r21, r27
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__clzsi2+0x7e>
     9fa:	16 95       	lsr	r17
     9fc:	07 95       	ror	r16
     9fe:	f7 94       	ror	r15
     a00:	e7 94       	ror	r14
     a02:	8a 95       	dec	r24
     a04:	d2 f7       	brpl	.-12     	; 0x9fa <__clzsi2+0x76>
     a06:	f7 01       	movw	r30, r14
     a08:	e8 59       	subi	r30, 0x98	; 152
     a0a:	ff 4f       	sbci	r31, 0xFF	; 255
     a0c:	80 81       	ld	r24, Z
     a0e:	28 1b       	sub	r18, r24
     a10:	31 09       	sbc	r19, r1
     a12:	41 09       	sbc	r20, r1
     a14:	51 09       	sbc	r21, r1
     a16:	c9 01       	movw	r24, r18
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	08 95       	ret

00000a22 <__pack_f>:
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	fc 01       	movw	r30, r24
     a2e:	e4 80       	ldd	r14, Z+4	; 0x04
     a30:	f5 80       	ldd	r15, Z+5	; 0x05
     a32:	06 81       	ldd	r16, Z+6	; 0x06
     a34:	17 81       	ldd	r17, Z+7	; 0x07
     a36:	d1 80       	ldd	r13, Z+1	; 0x01
     a38:	80 81       	ld	r24, Z
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	48 f4       	brcc	.+18     	; 0xa50 <__pack_f+0x2e>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e1       	ldi	r26, 0x10	; 16
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e8 2a       	or	r14, r24
     a48:	f9 2a       	or	r15, r25
     a4a:	0a 2b       	or	r16, r26
     a4c:	1b 2b       	or	r17, r27
     a4e:	a5 c0       	rjmp	.+330    	; 0xb9a <__pack_f+0x178>
     a50:	84 30       	cpi	r24, 0x04	; 4
     a52:	09 f4       	brne	.+2      	; 0xa56 <__pack_f+0x34>
     a54:	9f c0       	rjmp	.+318    	; 0xb94 <__pack_f+0x172>
     a56:	82 30       	cpi	r24, 0x02	; 2
     a58:	21 f4       	brne	.+8      	; 0xa62 <__pack_f+0x40>
     a5a:	ee 24       	eor	r14, r14
     a5c:	ff 24       	eor	r15, r15
     a5e:	87 01       	movw	r16, r14
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <__pack_f+0x4a>
     a62:	e1 14       	cp	r14, r1
     a64:	f1 04       	cpc	r15, r1
     a66:	01 05       	cpc	r16, r1
     a68:	11 05       	cpc	r17, r1
     a6a:	19 f4       	brne	.+6      	; 0xa72 <__pack_f+0x50>
     a6c:	e0 e0       	ldi	r30, 0x00	; 0
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	96 c0       	rjmp	.+300    	; 0xb9e <__pack_f+0x17c>
     a72:	62 81       	ldd	r22, Z+2	; 0x02
     a74:	73 81       	ldd	r23, Z+3	; 0x03
     a76:	9f ef       	ldi	r25, 0xFF	; 255
     a78:	62 38       	cpi	r22, 0x82	; 130
     a7a:	79 07       	cpc	r23, r25
     a7c:	0c f0       	brlt	.+2      	; 0xa80 <__pack_f+0x5e>
     a7e:	5b c0       	rjmp	.+182    	; 0xb36 <__pack_f+0x114>
     a80:	22 e8       	ldi	r18, 0x82	; 130
     a82:	3f ef       	ldi	r19, 0xFF	; 255
     a84:	26 1b       	sub	r18, r22
     a86:	37 0b       	sbc	r19, r23
     a88:	2a 31       	cpi	r18, 0x1A	; 26
     a8a:	31 05       	cpc	r19, r1
     a8c:	2c f0       	brlt	.+10     	; 0xa98 <__pack_f+0x76>
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	2a c0       	rjmp	.+84     	; 0xaec <__pack_f+0xca>
     a98:	b8 01       	movw	r22, r16
     a9a:	a7 01       	movw	r20, r14
     a9c:	02 2e       	mov	r0, r18
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__pack_f+0x86>
     aa0:	76 95       	lsr	r23
     aa2:	67 95       	ror	r22
     aa4:	57 95       	ror	r21
     aa6:	47 95       	ror	r20
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__pack_f+0x7e>
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__pack_f+0x9c>
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	aa 1f       	adc	r26, r26
     abc:	bb 1f       	adc	r27, r27
     abe:	2a 95       	dec	r18
     ac0:	d2 f7       	brpl	.-12     	; 0xab6 <__pack_f+0x94>
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	a1 09       	sbc	r26, r1
     ac6:	b1 09       	sbc	r27, r1
     ac8:	8e 21       	and	r24, r14
     aca:	9f 21       	and	r25, r15
     acc:	a0 23       	and	r26, r16
     ace:	b1 23       	and	r27, r17
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	a1 05       	cpc	r26, r1
     ad4:	b1 05       	cpc	r27, r1
     ad6:	21 f0       	breq	.+8      	; 0xae0 <__pack_f+0xbe>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	9a 01       	movw	r18, r20
     ae2:	ab 01       	movw	r20, r22
     ae4:	28 2b       	or	r18, r24
     ae6:	39 2b       	or	r19, r25
     ae8:	4a 2b       	or	r20, r26
     aea:	5b 2b       	or	r21, r27
     aec:	da 01       	movw	r26, r20
     aee:	c9 01       	movw	r24, r18
     af0:	8f 77       	andi	r24, 0x7F	; 127
     af2:	90 70       	andi	r25, 0x00	; 0
     af4:	a0 70       	andi	r26, 0x00	; 0
     af6:	b0 70       	andi	r27, 0x00	; 0
     af8:	80 34       	cpi	r24, 0x40	; 64
     afa:	91 05       	cpc	r25, r1
     afc:	a1 05       	cpc	r26, r1
     afe:	b1 05       	cpc	r27, r1
     b00:	39 f4       	brne	.+14     	; 0xb10 <__pack_f+0xee>
     b02:	27 ff       	sbrs	r18, 7
     b04:	09 c0       	rjmp	.+18     	; 0xb18 <__pack_f+0xf6>
     b06:	20 5c       	subi	r18, 0xC0	; 192
     b08:	3f 4f       	sbci	r19, 0xFF	; 255
     b0a:	4f 4f       	sbci	r20, 0xFF	; 255
     b0c:	5f 4f       	sbci	r21, 0xFF	; 255
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__pack_f+0xf6>
     b10:	21 5c       	subi	r18, 0xC1	; 193
     b12:	3f 4f       	sbci	r19, 0xFF	; 255
     b14:	4f 4f       	sbci	r20, 0xFF	; 255
     b16:	5f 4f       	sbci	r21, 0xFF	; 255
     b18:	e0 e0       	ldi	r30, 0x00	; 0
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	3a 07       	cpc	r19, r26
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	4a 07       	cpc	r20, r26
     b26:	a0 e4       	ldi	r26, 0x40	; 64
     b28:	5a 07       	cpc	r21, r26
     b2a:	10 f0       	brcs	.+4      	; 0xb30 <__pack_f+0x10e>
     b2c:	e1 e0       	ldi	r30, 0x01	; 1
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	79 01       	movw	r14, r18
     b32:	8a 01       	movw	r16, r20
     b34:	27 c0       	rjmp	.+78     	; 0xb84 <__pack_f+0x162>
     b36:	60 38       	cpi	r22, 0x80	; 128
     b38:	71 05       	cpc	r23, r1
     b3a:	64 f5       	brge	.+88     	; 0xb94 <__pack_f+0x172>
     b3c:	fb 01       	movw	r30, r22
     b3e:	e1 58       	subi	r30, 0x81	; 129
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	d8 01       	movw	r26, r16
     b44:	c7 01       	movw	r24, r14
     b46:	8f 77       	andi	r24, 0x7F	; 127
     b48:	90 70       	andi	r25, 0x00	; 0
     b4a:	a0 70       	andi	r26, 0x00	; 0
     b4c:	b0 70       	andi	r27, 0x00	; 0
     b4e:	80 34       	cpi	r24, 0x40	; 64
     b50:	91 05       	cpc	r25, r1
     b52:	a1 05       	cpc	r26, r1
     b54:	b1 05       	cpc	r27, r1
     b56:	39 f4       	brne	.+14     	; 0xb66 <__pack_f+0x144>
     b58:	e7 fe       	sbrs	r14, 7
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <__pack_f+0x154>
     b5c:	80 e4       	ldi	r24, 0x40	; 64
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x14c>
     b66:	8f e3       	ldi	r24, 0x3F	; 63
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a0 e0       	ldi	r26, 0x00	; 0
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e8 0e       	add	r14, r24
     b70:	f9 1e       	adc	r15, r25
     b72:	0a 1f       	adc	r16, r26
     b74:	1b 1f       	adc	r17, r27
     b76:	17 ff       	sbrs	r17, 7
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <__pack_f+0x162>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	31 96       	adiw	r30, 0x01	; 1
     b84:	87 e0       	ldi	r24, 0x07	; 7
     b86:	16 95       	lsr	r17
     b88:	07 95       	ror	r16
     b8a:	f7 94       	ror	r15
     b8c:	e7 94       	ror	r14
     b8e:	8a 95       	dec	r24
     b90:	d1 f7       	brne	.-12     	; 0xb86 <__pack_f+0x164>
     b92:	05 c0       	rjmp	.+10     	; 0xb9e <__pack_f+0x17c>
     b94:	ee 24       	eor	r14, r14
     b96:	ff 24       	eor	r15, r15
     b98:	87 01       	movw	r16, r14
     b9a:	ef ef       	ldi	r30, 0xFF	; 255
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	6e 2f       	mov	r22, r30
     ba0:	67 95       	ror	r22
     ba2:	66 27       	eor	r22, r22
     ba4:	67 95       	ror	r22
     ba6:	90 2f       	mov	r25, r16
     ba8:	9f 77       	andi	r25, 0x7F	; 127
     baa:	d7 94       	ror	r13
     bac:	dd 24       	eor	r13, r13
     bae:	d7 94       	ror	r13
     bb0:	8e 2f       	mov	r24, r30
     bb2:	86 95       	lsr	r24
     bb4:	49 2f       	mov	r20, r25
     bb6:	46 2b       	or	r20, r22
     bb8:	58 2f       	mov	r21, r24
     bba:	5d 29       	or	r21, r13
     bbc:	b7 01       	movw	r22, r14
     bbe:	ca 01       	movw	r24, r20
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	08 95       	ret

00000bcc <__unpack_f>:
     bcc:	fc 01       	movw	r30, r24
     bce:	db 01       	movw	r26, r22
     bd0:	40 81       	ld	r20, Z
     bd2:	51 81       	ldd	r21, Z+1	; 0x01
     bd4:	22 81       	ldd	r18, Z+2	; 0x02
     bd6:	62 2f       	mov	r22, r18
     bd8:	6f 77       	andi	r22, 0x7F	; 127
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	22 1f       	adc	r18, r18
     bde:	22 27       	eor	r18, r18
     be0:	22 1f       	adc	r18, r18
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	89 2f       	mov	r24, r25
     be6:	88 0f       	add	r24, r24
     be8:	82 2b       	or	r24, r18
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	99 1f       	adc	r25, r25
     bf0:	99 27       	eor	r25, r25
     bf2:	99 1f       	adc	r25, r25
     bf4:	11 96       	adiw	r26, 0x01	; 1
     bf6:	9c 93       	st	X, r25
     bf8:	11 97       	sbiw	r26, 0x01	; 1
     bfa:	21 15       	cp	r18, r1
     bfc:	31 05       	cpc	r19, r1
     bfe:	a9 f5       	brne	.+106    	; 0xc6a <__unpack_f+0x9e>
     c00:	41 15       	cp	r20, r1
     c02:	51 05       	cpc	r21, r1
     c04:	61 05       	cpc	r22, r1
     c06:	71 05       	cpc	r23, r1
     c08:	11 f4       	brne	.+4      	; 0xc0e <__unpack_f+0x42>
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	37 c0       	rjmp	.+110    	; 0xc7c <__unpack_f+0xb0>
     c0e:	82 e8       	ldi	r24, 0x82	; 130
     c10:	9f ef       	ldi	r25, 0xFF	; 255
     c12:	13 96       	adiw	r26, 0x03	; 3
     c14:	9c 93       	st	X, r25
     c16:	8e 93       	st	-X, r24
     c18:	12 97       	sbiw	r26, 0x02	; 2
     c1a:	9a 01       	movw	r18, r20
     c1c:	ab 01       	movw	r20, r22
     c1e:	67 e0       	ldi	r22, 0x07	; 7
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	44 1f       	adc	r20, r20
     c26:	55 1f       	adc	r21, r21
     c28:	6a 95       	dec	r22
     c2a:	d1 f7       	brne	.-12     	; 0xc20 <__unpack_f+0x54>
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	8c 93       	st	X, r24
     c30:	0d c0       	rjmp	.+26     	; 0xc4c <__unpack_f+0x80>
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	44 1f       	adc	r20, r20
     c38:	55 1f       	adc	r21, r21
     c3a:	12 96       	adiw	r26, 0x02	; 2
     c3c:	8d 91       	ld	r24, X+
     c3e:	9c 91       	ld	r25, X
     c40:	13 97       	sbiw	r26, 0x03	; 3
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	13 96       	adiw	r26, 0x03	; 3
     c46:	9c 93       	st	X, r25
     c48:	8e 93       	st	-X, r24
     c4a:	12 97       	sbiw	r26, 0x02	; 2
     c4c:	20 30       	cpi	r18, 0x00	; 0
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	38 07       	cpc	r19, r24
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	48 07       	cpc	r20, r24
     c56:	80 e4       	ldi	r24, 0x40	; 64
     c58:	58 07       	cpc	r21, r24
     c5a:	58 f3       	brcs	.-42     	; 0xc32 <__unpack_f+0x66>
     c5c:	14 96       	adiw	r26, 0x04	; 4
     c5e:	2d 93       	st	X+, r18
     c60:	3d 93       	st	X+, r19
     c62:	4d 93       	st	X+, r20
     c64:	5c 93       	st	X, r21
     c66:	17 97       	sbiw	r26, 0x07	; 7
     c68:	08 95       	ret
     c6a:	2f 3f       	cpi	r18, 0xFF	; 255
     c6c:	31 05       	cpc	r19, r1
     c6e:	79 f4       	brne	.+30     	; 0xc8e <__unpack_f+0xc2>
     c70:	41 15       	cp	r20, r1
     c72:	51 05       	cpc	r21, r1
     c74:	61 05       	cpc	r22, r1
     c76:	71 05       	cpc	r23, r1
     c78:	19 f4       	brne	.+6      	; 0xc80 <__unpack_f+0xb4>
     c7a:	84 e0       	ldi	r24, 0x04	; 4
     c7c:	8c 93       	st	X, r24
     c7e:	08 95       	ret
     c80:	64 ff       	sbrs	r22, 4
     c82:	03 c0       	rjmp	.+6      	; 0xc8a <__unpack_f+0xbe>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8c 93       	st	X, r24
     c88:	12 c0       	rjmp	.+36     	; 0xcae <__unpack_f+0xe2>
     c8a:	1c 92       	st	X, r1
     c8c:	10 c0       	rjmp	.+32     	; 0xcae <__unpack_f+0xe2>
     c8e:	2f 57       	subi	r18, 0x7F	; 127
     c90:	30 40       	sbci	r19, 0x00	; 0
     c92:	13 96       	adiw	r26, 0x03	; 3
     c94:	3c 93       	st	X, r19
     c96:	2e 93       	st	-X, r18
     c98:	12 97       	sbiw	r26, 0x02	; 2
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	8c 93       	st	X, r24
     c9e:	87 e0       	ldi	r24, 0x07	; 7
     ca0:	44 0f       	add	r20, r20
     ca2:	55 1f       	adc	r21, r21
     ca4:	66 1f       	adc	r22, r22
     ca6:	77 1f       	adc	r23, r23
     ca8:	8a 95       	dec	r24
     caa:	d1 f7       	brne	.-12     	; 0xca0 <__unpack_f+0xd4>
     cac:	70 64       	ori	r23, 0x40	; 64
     cae:	14 96       	adiw	r26, 0x04	; 4
     cb0:	4d 93       	st	X+, r20
     cb2:	5d 93       	st	X+, r21
     cb4:	6d 93       	st	X+, r22
     cb6:	7c 93       	st	X, r23
     cb8:	17 97       	sbiw	r26, 0x07	; 7
     cba:	08 95       	ret

00000cbc <__fpcmp_parts_f>:
     cbc:	1f 93       	push	r17
     cbe:	dc 01       	movw	r26, r24
     cc0:	fb 01       	movw	r30, r22
     cc2:	9c 91       	ld	r25, X
     cc4:	92 30       	cpi	r25, 0x02	; 2
     cc6:	08 f4       	brcc	.+2      	; 0xcca <__fpcmp_parts_f+0xe>
     cc8:	47 c0       	rjmp	.+142    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cca:	80 81       	ld	r24, Z
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <__fpcmp_parts_f+0x16>
     cd0:	43 c0       	rjmp	.+134    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cd2:	94 30       	cpi	r25, 0x04	; 4
     cd4:	51 f4       	brne	.+20     	; 0xcea <__fpcmp_parts_f+0x2e>
     cd6:	11 96       	adiw	r26, 0x01	; 1
     cd8:	1c 91       	ld	r17, X
     cda:	84 30       	cpi	r24, 0x04	; 4
     cdc:	99 f5       	brne	.+102    	; 0xd44 <__fpcmp_parts_f+0x88>
     cde:	81 81       	ldd	r24, Z+1	; 0x01
     ce0:	68 2f       	mov	r22, r24
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	61 1b       	sub	r22, r17
     ce6:	71 09       	sbc	r23, r1
     ce8:	3f c0       	rjmp	.+126    	; 0xd68 <__fpcmp_parts_f+0xac>
     cea:	84 30       	cpi	r24, 0x04	; 4
     cec:	21 f0       	breq	.+8      	; 0xcf6 <__fpcmp_parts_f+0x3a>
     cee:	92 30       	cpi	r25, 0x02	; 2
     cf0:	31 f4       	brne	.+12     	; 0xcfe <__fpcmp_parts_f+0x42>
     cf2:	82 30       	cpi	r24, 0x02	; 2
     cf4:	b9 f1       	breq	.+110    	; 0xd64 <__fpcmp_parts_f+0xa8>
     cf6:	81 81       	ldd	r24, Z+1	; 0x01
     cf8:	88 23       	and	r24, r24
     cfa:	89 f1       	breq	.+98     	; 0xd5e <__fpcmp_parts_f+0xa2>
     cfc:	2d c0       	rjmp	.+90     	; 0xd58 <__fpcmp_parts_f+0x9c>
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	1c 91       	ld	r17, X
     d02:	11 97       	sbiw	r26, 0x01	; 1
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	f1 f0       	breq	.+60     	; 0xd44 <__fpcmp_parts_f+0x88>
     d08:	81 81       	ldd	r24, Z+1	; 0x01
     d0a:	18 17       	cp	r17, r24
     d0c:	d9 f4       	brne	.+54     	; 0xd44 <__fpcmp_parts_f+0x88>
     d0e:	12 96       	adiw	r26, 0x02	; 2
     d10:	2d 91       	ld	r18, X+
     d12:	3c 91       	ld	r19, X
     d14:	13 97       	sbiw	r26, 0x03	; 3
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	82 17       	cp	r24, r18
     d1c:	93 07       	cpc	r25, r19
     d1e:	94 f0       	brlt	.+36     	; 0xd44 <__fpcmp_parts_f+0x88>
     d20:	28 17       	cp	r18, r24
     d22:	39 07       	cpc	r19, r25
     d24:	bc f0       	brlt	.+46     	; 0xd54 <__fpcmp_parts_f+0x98>
     d26:	14 96       	adiw	r26, 0x04	; 4
     d28:	8d 91       	ld	r24, X+
     d2a:	9d 91       	ld	r25, X+
     d2c:	0d 90       	ld	r0, X+
     d2e:	bc 91       	ld	r27, X
     d30:	a0 2d       	mov	r26, r0
     d32:	24 81       	ldd	r18, Z+4	; 0x04
     d34:	35 81       	ldd	r19, Z+5	; 0x05
     d36:	46 81       	ldd	r20, Z+6	; 0x06
     d38:	57 81       	ldd	r21, Z+7	; 0x07
     d3a:	28 17       	cp	r18, r24
     d3c:	39 07       	cpc	r19, r25
     d3e:	4a 07       	cpc	r20, r26
     d40:	5b 07       	cpc	r21, r27
     d42:	18 f4       	brcc	.+6      	; 0xd4a <__fpcmp_parts_f+0x8e>
     d44:	11 23       	and	r17, r17
     d46:	41 f0       	breq	.+16     	; 0xd58 <__fpcmp_parts_f+0x9c>
     d48:	0a c0       	rjmp	.+20     	; 0xd5e <__fpcmp_parts_f+0xa2>
     d4a:	82 17       	cp	r24, r18
     d4c:	93 07       	cpc	r25, r19
     d4e:	a4 07       	cpc	r26, r20
     d50:	b5 07       	cpc	r27, r21
     d52:	40 f4       	brcc	.+16     	; 0xd64 <__fpcmp_parts_f+0xa8>
     d54:	11 23       	and	r17, r17
     d56:	19 f0       	breq	.+6      	; 0xd5e <__fpcmp_parts_f+0xa2>
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <__fpcmp_parts_f+0xac>
     d5e:	6f ef       	ldi	r22, 0xFF	; 255
     d60:	7f ef       	ldi	r23, 0xFF	; 255
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <__fpcmp_parts_f+0xac>
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	cb 01       	movw	r24, r22
     d6a:	1f 91       	pop	r17
     d6c:	08 95       	ret

00000d6e <M_UART_Void_UARTWrite>:
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_UART_Void_UARTWrite(u8 Copy_U8_Data)
{
	u32 Local_U32_Counter = 0;
	UDR_REG = Copy_U8_Data;
     d6e:	8c b9       	out	0x0c, r24	; 12
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	40 e0       	ldi	r20, 0x00	; 0
     d76:	50 e0       	ldi	r21, 0x00	; 0
	while(Local_U32_Counter < UART_POLLING_TIME)
	{
		Local_U32_Counter++;
		if(GET_BIT(UCSRA_REG,TXC_BIT) == UART_FINISHED_TRANSMITTING)
     d78:	eb e2       	ldi	r30, 0x2B	; 43
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	86 fd       	sbrc	r24, 6
     d80:	0c c0       	rjmp	.+24     	; 0xd9a <M_UART_Void_UARTWrite+0x2c>
{
	u32 Local_U32_Counter = 0;
	UDR_REG = Copy_U8_Data;
	while(Local_U32_Counter < UART_POLLING_TIME)
	{
		Local_U32_Counter++;
     d82:	2f 5f       	subi	r18, 0xFF	; 255
     d84:	3f 4f       	sbci	r19, 0xFF	; 255
     d86:	4f 4f       	sbci	r20, 0xFF	; 255
     d88:	5f 4f       	sbci	r21, 0xFF	; 255
/*--------------------------------------------------------------------------------------------*/
void M_UART_Void_UARTWrite(u8 Copy_U8_Data)
{
	u32 Local_U32_Counter = 0;
	UDR_REG = Copy_U8_Data;
	while(Local_U32_Counter < UART_POLLING_TIME)
     d8a:	20 38       	cpi	r18, 0x80	; 128
     d8c:	84 e8       	ldi	r24, 0x84	; 132
     d8e:	38 07       	cpc	r19, r24
     d90:	8e e1       	ldi	r24, 0x1E	; 30
     d92:	48 07       	cpc	r20, r24
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	58 07       	cpc	r21, r24
     d98:	89 f7       	brne	.-30     	; 0xd7c <M_UART_Void_UARTWrite+0xe>
     d9a:	08 95       	ret

00000d9c <M_UART_U8_UARTRead>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
u8   M_UART_U8_UARTRead(void)
{
	while(GET_BIT(UCSRA_REG,RXC_BIT) == 0);
     d9c:	eb e2       	ldi	r30, 0x2B	; 43
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	88 23       	and	r24, r24
     da4:	ec f7       	brge	.-6      	; 0xda0 <M_UART_U8_UARTRead+0x4>
	return UDR_REG;
     da6:	8c b1       	in	r24, 0x0c	; 12
}
     da8:	08 95       	ret

00000daa <M_UART_Void_UARTInit>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_UART_Void_UARTInit(void)
{
	M_DIO_Void_SetPinDirection(PD0_PIN,INPUT);
     daa:	88 e2       	ldi	r24, 0x28	; 40
     dac:	60 e0       	ldi	r22, 0x00	; 0
     dae:	0e 94 b0 08 	call	0x1160	; 0x1160 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(PD1_PIN,OUTPUT);
     db2:	89 e2       	ldi	r24, 0x29	; 41
     db4:	61 e0       	ldi	r22, 0x01	; 1
     db6:	0e 94 b0 08 	call	0x1160	; 0x1160 <M_DIO_Void_SetPinDirection>
	/* TO SELECT BAUD RATE -> 9600 */
	UBRRL_REG = ((F_OSC * 1000000) / ((u32)16 * UART_BAUD_RATE)) - 1 ;
     dba:	87 e6       	ldi	r24, 0x67	; 103
     dbc:	89 b9       	out	0x09, r24	; 9
#if   UART_PARITY_MODE   ==   PARITY_DISABLE
	CLR_BIT(UCSRC_REG,UPM0_BIT);
     dbe:	e0 e4       	ldi	r30, 0x40	; 64
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	8f 7e       	andi	r24, 0xEF	; 239
     dc6:	80 83       	st	Z, r24
	CLR_BIT(UCSRC_REG,UPM1_BIT);
     dc8:	80 81       	ld	r24, Z
     dca:	8f 7d       	andi	r24, 0xDF	; 223
     dcc:	80 83       	st	Z, r24
#elif UART_PARITY_MODE   ==   PARITY_ODD
	SET_BIT(UCSRC_REG,UPM0_BIT);
	SET_BIT(UCSRC_REG,UPM1_BIT);
#endif
#if   UART_STOP_BIT   ==   1
	CLR_BIT(UCSRC_REG,USBS_BIT);
     dce:	80 81       	ld	r24, Z
     dd0:	87 7f       	andi	r24, 0xF7	; 247
     dd2:	80 83       	st	Z, r24
#elif UART_STOP_BIT   ==   2
	SET_BIT(UCSRC_REG,USBS_BIT);
#endif
	/* TO SELECT CHARACTER SIZE -> 8 BITS */
	CLR_BIT(UCSRB_REG,UCSZ2_BIT);
     dd4:	aa e2       	ldi	r26, 0x2A	; 42
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	8c 91       	ld	r24, X
     dda:	8b 7f       	andi	r24, 0xFB	; 251
     ddc:	8c 93       	st	X, r24
	SET_BIT(UCSRC_REG,UCSZ1_BIT);
     dde:	80 81       	ld	r24, Z
     de0:	84 60       	ori	r24, 0x04	; 4
     de2:	80 83       	st	Z, r24
	SET_BIT(UCSRC_REG,UCSZ0_BIT);
     de4:	80 81       	ld	r24, Z
     de6:	82 60       	ori	r24, 0x02	; 2
     de8:	80 83       	st	Z, r24

	/* TO ENABLE RX CIRCUIT */
	SET_BIT(UCSRB_REG,RXEN_BIT);
     dea:	8c 91       	ld	r24, X
     dec:	80 61       	ori	r24, 0x10	; 16
     dee:	8c 93       	st	X, r24
	/* TO ENABLE TX CIRCUIT */
	SET_BIT(UCSRB_REG,TXEN_BIT);
     df0:	8c 91       	ld	r24, X
     df2:	88 60       	ori	r24, 0x08	; 8
     df4:	8c 93       	st	X, r24
}
     df6:	08 95       	ret

00000df8 <M_Timer_Void_TimerInit>:
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_TimerInit(void)
{
#if   TIMER0_MODE   ==   NORMAL_MODE
	CLR_BIT(TCCR0_REG,WGM00_BIT);
     df8:	e3 e5       	ldi	r30, 0x53	; 83
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	8f 7b       	andi	r24, 0xBF	; 191
     e00:	80 83       	st	Z, r24
	CLR_BIT(TCCR0_REG,WGM01_BIT);
     e02:	80 81       	ld	r24, Z
     e04:	87 7f       	andi	r24, 0xF7	; 247
     e06:	80 83       	st	Z, r24
	/* TO ENABLE TIMER0 OV INTERRUPT */
	SET_BIT(TIMSK_REG,TOIE0_BIT);
     e08:	e9 e5       	ldi	r30, 0x59	; 89
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	81 60       	ori	r24, 0x01	; 1
     e10:	80 83       	st	Z, r24
	CLR_BIT(TCCR0_REG,WGM00_BIT);
	SET_BIT(TCCR0_REG,WGM01_BIT);
	/* TO ENABLE TIMER0 CM INTERRUPT */
	SET_BIT(TIMSK_REG,OCIE0_BIT);
#endif
}
     e12:	08 95       	ret

00000e14 <M_Timer_Void_TimerSetTime>:
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_TimerSetTime(u32 Copy_U32_DesiredTime)
{
	u32 Local_U32_TickTime   = TIMER0_PRESCALER_DF / F_OSC; /* RESULT WILL BE IN MICRO SECONDS */
	u32 Local_U32_TotalTicks = (Copy_U32_DesiredTime * 1000) / Local_U32_TickTime;
     e14:	28 ee       	ldi	r18, 0xE8	; 232
     e16:	33 e0       	ldi	r19, 0x03	; 3
     e18:	40 e0       	ldi	r20, 0x00	; 0
     e1a:	50 e0       	ldi	r21, 0x00	; 0
     e1c:	0e 94 3f 11 	call	0x227e	; 0x227e <__mulsi3>
     e20:	68 94       	set
     e22:	15 f8       	bld	r1, 5
     e24:	96 95       	lsr	r25
     e26:	87 95       	ror	r24
     e28:	77 95       	ror	r23
     e2a:	67 95       	ror	r22
     e2c:	16 94       	lsr	r1
     e2e:	d1 f7       	brne	.-12     	; 0xe24 <M_Timer_Void_TimerSetTime+0x10>

#if   TIMER0_MODE   ==   NORMAL_MODE
	Timer_U32_NumOfOV        = Local_U32_TotalTicks / 256;
     e30:	27 2f       	mov	r18, r23
     e32:	38 2f       	mov	r19, r24
     e34:	49 2f       	mov	r20, r25
     e36:	55 27       	eor	r21, r21
     e38:	20 93 78 01 	sts	0x0178, r18
     e3c:	30 93 79 01 	sts	0x0179, r19
     e40:	40 93 7a 01 	sts	0x017A, r20
     e44:	50 93 7b 01 	sts	0x017B, r21
	Timer_U8_RemTicks        = Local_U32_TotalTicks % 256;
     e48:	86 2f       	mov	r24, r22
     e4a:	60 93 80 01 	sts	0x0180, r22
	if(Timer_U8_RemTicks != 0)
     e4e:	66 23       	and	r22, r22
     e50:	79 f0       	breq	.+30     	; 0xe70 <M_Timer_Void_TimerSetTime+0x5c>
	{
		TCNT0_REG = 256 - Timer_U8_RemTicks;
     e52:	81 95       	neg	r24
     e54:	82 bf       	out	0x32, r24	; 50
		Timer_U32_NumOfOV++;
     e56:	da 01       	movw	r26, r20
     e58:	c9 01       	movw	r24, r18
     e5a:	01 96       	adiw	r24, 0x01	; 1
     e5c:	a1 1d       	adc	r26, r1
     e5e:	b1 1d       	adc	r27, r1
     e60:	80 93 78 01 	sts	0x0178, r24
     e64:	90 93 79 01 	sts	0x0179, r25
     e68:	a0 93 7a 01 	sts	0x017A, r26
     e6c:	b0 93 7b 01 	sts	0x017B, r27
     e70:	08 95       	ret

00000e72 <M_Timer_Void_TimerStart>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_TimerStart(u8 Copy_U8_TimerChannel)
{
	switch(Copy_U8_TimerChannel)
     e72:	88 23       	and	r24, r24
     e74:	19 f0       	breq	.+6      	; 0xe7c <M_Timer_Void_TimerStart+0xa>
     e76:	81 30       	cpi	r24, 0x01	; 1
     e78:	c1 f4       	brne	.+48     	; 0xeaa <M_Timer_Void_TimerStart+0x38>
     e7a:	0c c0       	rjmp	.+24     	; 0xe94 <M_Timer_Void_TimerStart+0x22>
	{
	case TIMER0_CHANNEL:
#if   TIMER0_PRESCALER_DF   ==   1024
	SET_BIT(TCCR0_REG,CS00_BIT);
     e7c:	e3 e5       	ldi	r30, 0x53	; 83
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	81 60       	ori	r24, 0x01	; 1
     e84:	80 83       	st	Z, r24
	CLR_BIT(TCCR0_REG,CS01_BIT);
     e86:	80 81       	ld	r24, Z
     e88:	8d 7f       	andi	r24, 0xFD	; 253
     e8a:	80 83       	st	Z, r24
	SET_BIT(TCCR0_REG,CS02_BIT);
     e8c:	80 81       	ld	r24, Z
     e8e:	84 60       	ori	r24, 0x04	; 4
     e90:	80 83       	st	Z, r24
     e92:	08 95       	ret
	SET_BIT(TCCR0_REG,CS02_BIT);
#endif
		break;
	case TIMER1_CHANNEL:
#if   TIMER1_PRESCALER_DF   ==   1024
		SET_BIT(TCCR1B_REG,CS10_BIT);
     e94:	ee e4       	ldi	r30, 0x4E	; 78
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	81 60       	ori	r24, 0x01	; 1
     e9c:	80 83       	st	Z, r24
		CLR_BIT(TCCR1B_REG,CS11_BIT);
     e9e:	80 81       	ld	r24, Z
     ea0:	8d 7f       	andi	r24, 0xFD	; 253
     ea2:	80 83       	st	Z, r24
		SET_BIT(TCCR1B_REG,CS12_BIT);
     ea4:	80 81       	ld	r24, Z
     ea6:	84 60       	ori	r24, 0x04	; 4
     ea8:	80 83       	st	Z, r24
     eaa:	08 95       	ret

00000eac <M_Timer_Void_TimerStop>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_TimerStop(u8 Copy_U8_TimerChannel)
{
	switch(Copy_U8_TimerChannel)
     eac:	88 23       	and	r24, r24
     eae:	19 f0       	breq	.+6      	; 0xeb6 <M_Timer_Void_TimerStop+0xa>
     eb0:	81 30       	cpi	r24, 0x01	; 1
     eb2:	c1 f4       	brne	.+48     	; 0xee4 <M_Timer_Void_TimerStop+0x38>
     eb4:	0c c0       	rjmp	.+24     	; 0xece <M_Timer_Void_TimerStop+0x22>
	{
	case TIMER0_CHANNEL:
		CLR_BIT(TCCR0_REG,CS00_BIT);
     eb6:	e3 e5       	ldi	r30, 0x53	; 83
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	8e 7f       	andi	r24, 0xFE	; 254
     ebe:	80 83       	st	Z, r24
		CLR_BIT(TCCR0_REG,CS01_BIT);
     ec0:	80 81       	ld	r24, Z
     ec2:	8d 7f       	andi	r24, 0xFD	; 253
     ec4:	80 83       	st	Z, r24
		CLR_BIT(TCCR0_REG,CS02_BIT);
     ec6:	80 81       	ld	r24, Z
     ec8:	8b 7f       	andi	r24, 0xFB	; 251
     eca:	80 83       	st	Z, r24
     ecc:	08 95       	ret

		break;
	case TIMER1_CHANNEL:
		CLR_BIT(TCCR1B_REG,CS10_BIT);
     ece:	ee e4       	ldi	r30, 0x4E	; 78
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	8e 7f       	andi	r24, 0xFE	; 254
     ed6:	80 83       	st	Z, r24
		CLR_BIT(TCCR1B_REG,CS11_BIT);
     ed8:	80 81       	ld	r24, Z
     eda:	8d 7f       	andi	r24, 0xFD	; 253
     edc:	80 83       	st	Z, r24
		CLR_BIT(TCCR1B_REG,CS12_BIT);
     ede:	80 81       	ld	r24, Z
     ee0:	8b 7f       	andi	r24, 0xFB	; 251
     ee2:	80 83       	st	Z, r24
     ee4:	08 95       	ret

00000ee6 <M_Timer_Void_PWMSetDutyCycle>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_PWMSetDutyCycle(u8 Copy_U8_TimerChannel,f32 Copy_F32_DutyCycle)
{
     ee6:	ef 92       	push	r14
     ee8:	ff 92       	push	r15
     eea:	0f 93       	push	r16
     eec:	1f 93       	push	r17
     eee:	7a 01       	movw	r14, r20
     ef0:	8b 01       	movw	r16, r22
	switch(Copy_U8_TimerChannel)
     ef2:	81 30       	cpi	r24, 0x01	; 1
     ef4:	d1 f4       	brne	.+52     	; 0xf2a <M_Timer_Void_PWMSetDutyCycle+0x44>
	OCR0_REG = ((Copy_F32_DutyCycle * 255 ) / 100);
#endif

		break;
	case TIMER1_CHANNEL:
		OCR1A_REG = ((Copy_F32_DutyCycle * ICR1_REG ) / 100) - 1;
     ef6:	66 b5       	in	r22, 0x26	; 38
     ef8:	77 b5       	in	r23, 0x27	; 39
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
     f02:	a8 01       	movw	r20, r16
     f04:	97 01       	movw	r18, r14
     f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	48 ec       	ldi	r20, 0xC8	; 200
     f10:	52 e4       	ldi	r21, 0x42	; 66
     f12:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	40 e8       	ldi	r20, 0x80	; 128
     f1c:	5f e3       	ldi	r21, 0x3F	; 63
     f1e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f26:	7b bd       	out	0x2b, r23	; 43
     f28:	6a bd       	out	0x2a, r22	; 42
		break;
	case TIMER2_CHANNEL:
		break;
	default: break;
	}
}
     f2a:	1f 91       	pop	r17
     f2c:	0f 91       	pop	r16
     f2e:	ff 90       	pop	r15
     f30:	ef 90       	pop	r14
     f32:	08 95       	ret

00000f34 <M_Timer_Void_PWMStart>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_PWMStart(u8 Copy_U8_TimerChannel)
{
	M_Timer_Void_TimerStart(Copy_U8_TimerChannel);
     f34:	0e 94 39 07 	call	0xe72	; 0xe72 <M_Timer_Void_TimerStart>
}
     f38:	08 95       	ret

00000f3a <M_Timer_Void_PWMStop>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_PWMStop(u8 Copy_U8_TimerChannel)
{
	M_Timer_Void_TimerStop(Copy_U8_TimerChannel);
     f3a:	0e 94 56 07 	call	0xeac	; 0xeac <M_Timer_Void_TimerStop>
}
     f3e:	08 95       	ret

00000f40 <M_Timer_Void_SetCallBack>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_SetCallBack(void(*Copy_Ptr)(void))
{
	Timer_CallBack = Copy_Ptr;
     f40:	90 93 86 01 	sts	0x0186, r25
     f44:	80 93 85 01 	sts	0x0185, r24
}
     f48:	08 95       	ret

00000f4a <__vector_11>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
#if   TIMER0_MODE   ==   NORMAL_MODE
ISR(TIMER0_OVF_vect)
{
     f4a:	1f 92       	push	r1
     f4c:	0f 92       	push	r0
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	0f 92       	push	r0
     f52:	11 24       	eor	r1, r1
     f54:	2f 93       	push	r18
     f56:	3f 93       	push	r19
     f58:	4f 93       	push	r20
     f5a:	5f 93       	push	r21
     f5c:	6f 93       	push	r22
     f5e:	7f 93       	push	r23
     f60:	8f 93       	push	r24
     f62:	9f 93       	push	r25
     f64:	af 93       	push	r26
     f66:	bf 93       	push	r27
     f68:	ef 93       	push	r30
     f6a:	ff 93       	push	r31
	static u32 Local_U32_Counter = 0;
	Local_U32_Counter++;
     f6c:	80 91 81 01 	lds	r24, 0x0181
     f70:	90 91 82 01 	lds	r25, 0x0182
     f74:	a0 91 83 01 	lds	r26, 0x0183
     f78:	b0 91 84 01 	lds	r27, 0x0184
     f7c:	01 96       	adiw	r24, 0x01	; 1
     f7e:	a1 1d       	adc	r26, r1
     f80:	b1 1d       	adc	r27, r1
     f82:	80 93 81 01 	sts	0x0181, r24
     f86:	90 93 82 01 	sts	0x0182, r25
     f8a:	a0 93 83 01 	sts	0x0183, r26
     f8e:	b0 93 84 01 	sts	0x0184, r27
	if(Local_U32_Counter == Timer_U32_NumOfOV)
     f92:	20 91 78 01 	lds	r18, 0x0178
     f96:	30 91 79 01 	lds	r19, 0x0179
     f9a:	40 91 7a 01 	lds	r20, 0x017A
     f9e:	50 91 7b 01 	lds	r21, 0x017B
     fa2:	82 17       	cp	r24, r18
     fa4:	93 07       	cpc	r25, r19
     fa6:	a4 07       	cpc	r26, r20
     fa8:	b5 07       	cpc	r27, r21
     faa:	89 f4       	brne	.+34     	; 0xfce <__vector_11+0x84>
	{
		Timer_CallBack();
     fac:	e0 91 85 01 	lds	r30, 0x0185
     fb0:	f0 91 86 01 	lds	r31, 0x0186
     fb4:	09 95       	icall
		Local_U32_Counter = 0;
     fb6:	10 92 81 01 	sts	0x0181, r1
     fba:	10 92 82 01 	sts	0x0182, r1
     fbe:	10 92 83 01 	sts	0x0183, r1
     fc2:	10 92 84 01 	sts	0x0184, r1
		TCNT0_REG = 256 - Timer_U8_RemTicks;
     fc6:	80 91 80 01 	lds	r24, 0x0180
     fca:	81 95       	neg	r24
     fcc:	82 bf       	out	0x32, r24	; 50
	}
}
     fce:	ff 91       	pop	r31
     fd0:	ef 91       	pop	r30
     fd2:	bf 91       	pop	r27
     fd4:	af 91       	pop	r26
     fd6:	9f 91       	pop	r25
     fd8:	8f 91       	pop	r24
     fda:	7f 91       	pop	r23
     fdc:	6f 91       	pop	r22
     fde:	5f 91       	pop	r21
     fe0:	4f 91       	pop	r20
     fe2:	3f 91       	pop	r19
     fe4:	2f 91       	pop	r18
     fe6:	0f 90       	pop	r0
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	0f 90       	pop	r0
     fec:	1f 90       	pop	r1
     fee:	18 95       	reti

00000ff0 <M_Timer_Void_PWMInit>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_PWMInit(u8 Copy_U8_TimerChannel)
{
	switch(Copy_U8_TimerChannel)
     ff0:	88 23       	and	r24, r24
     ff2:	19 f0       	breq	.+6      	; 0xffa <M_Timer_Void_PWMInit+0xa>
     ff4:	81 30       	cpi	r24, 0x01	; 1
     ff6:	61 f5       	brne	.+88     	; 0x1050 <M_Timer_Void_PWMInit+0x60>
     ff8:	0d c0       	rjmp	.+26     	; 0x1014 <M_Timer_Void_PWMInit+0x24>
	{
	case TIMER0_CHANNEL:
		M_DIO_Void_SetPinDirection(PB3_PIN,OUTPUT);
     ffa:	87 e1       	ldi	r24, 0x17	; 23
     ffc:	61 e0       	ldi	r22, 0x01	; 1
     ffe:	0e 94 b0 08 	call	0x1160	; 0x1160 <M_DIO_Void_SetPinDirection>
	#elif TIMER0_MODE   ==   PHASE_CORRECT_PWM_MODE
		SET_BIT(TCCR0_REG,WGM00_BIT);
		CLR_BIT(TCCR0_REG,WGM01_BIT);
	#endif
	#if   TIMER0_FAST_PWM_MODE   ==   NON_INVERTED
		CLR_BIT(TCCR0_REG,COM00_BIT);
    1002:	e3 e5       	ldi	r30, 0x53	; 83
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	8f 7e       	andi	r24, 0xEF	; 239
    100a:	80 83       	st	Z, r24
		SET_BIT(TCCR0_REG,COM01_BIT);
    100c:	80 81       	ld	r24, Z
    100e:	80 62       	ori	r24, 0x20	; 32
    1010:	80 83       	st	Z, r24
    1012:	08 95       	ret
		SET_BIT(TCCR0_REG,COM00_BIT);
		SET_BIT(TCCR0_REG,COM01_BIT);
	#endif
		break;
	case TIMER1_CHANNEL:
		M_DIO_Void_SetPinDirection(PD5_PIN,OUTPUT);
    1014:	8d e2       	ldi	r24, 0x2D	; 45
    1016:	61 e0       	ldi	r22, 0x01	; 1
    1018:	0e 94 b0 08 	call	0x1160	; 0x1160 <M_DIO_Void_SetPinDirection>
		/* TO SELECT MODE NO. 14 IN TABLE 47 */
		CLR_BIT(TCCR1A_REG,WGM10_BIT);
    101c:	af e4       	ldi	r26, 0x4F	; 79
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	8c 91       	ld	r24, X
    1022:	8e 7f       	andi	r24, 0xFE	; 254
    1024:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,WGM11_BIT);
    1026:	8c 91       	ld	r24, X
    1028:	82 60       	ori	r24, 0x02	; 2
    102a:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,WGM12_BIT);
    102c:	ee e4       	ldi	r30, 0x4E	; 78
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	88 60       	ori	r24, 0x08	; 8
    1034:	80 83       	st	Z, r24
		SET_BIT(TCCR1B_REG,WGM13_BIT);
    1036:	80 81       	ld	r24, Z
    1038:	80 61       	ori	r24, 0x10	; 16
    103a:	80 83       	st	Z, r24
		/* TO SELECT NON INVERTED MODE */
		CLR_BIT(TCCR1A_REG,COM1A0_BIT);
    103c:	8c 91       	ld	r24, X
    103e:	8f 7b       	andi	r24, 0xBF	; 191
    1040:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,COM1A1_BIT);
    1042:	8c 91       	ld	r24, X
    1044:	80 68       	ori	r24, 0x80	; 128
    1046:	8c 93       	st	X, r24
		ICR1_REG = ((F_OSC * 1000000) / TIMER1_PRESCALER_DF) / F_PWM1;
    1048:	84 e0       	ldi	r24, 0x04	; 4
    104a:	91 e0       	ldi	r25, 0x01	; 1
    104c:	97 bd       	out	0x27, r25	; 39
    104e:	86 bd       	out	0x26, r24	; 38
    1050:	08 95       	ret

00001052 <M_I2C_Void_I2CInit>:
/*   FUNCTION BODY   */
/*============================================================================================*/
void M_I2C_Void_I2CInit(void)
{
#if   I2C_MODE   ==   I2C_MASTER
	  TWBR_REG = (((I2C_F_CPU * 1000000) / ((u32)I2C_F_SCL * 1000)) - 16) / 2;
    1052:	8c e0       	ldi	r24, 0x0C	; 12
    1054:	80 b9       	out	0x00, r24	; 0
#elif I2C_MODE   ==   I2C_SLAVE
	TWAR_REG = (I2C_SLAVE_ADDRESS << 1) | I2C_GENERAL_CALL;
#endif
	/* TO ENABLE 12C CIRCUIT */
	SET_BIT(TWCR_REG,TWEN_BIT);
    1056:	e6 e5       	ldi	r30, 0x56	; 86
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	84 60       	ori	r24, 0x04	; 4
    105e:	80 83       	st	Z, r24
}
    1060:	08 95       	ret

00001062 <M_I2C_Void_StartCondition>:
/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
void M_I2C_Void_StartCondition(void)
{
	SET_BIT(TWCR_REG,TWSTA_BIT);
    1062:	e6 e5       	ldi	r30, 0x56	; 86
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	80 62       	ori	r24, 0x20	; 32
    106a:	80 83       	st	Z, r24
	SET_BIT(TWCR_REG,TWINT_BIT);          /* TO CLEAR THE FLAG */
    106c:	80 81       	ld	r24, Z
    106e:	80 68       	ori	r24, 0x80	; 128
    1070:	80 83       	st	Z, r24
	while(GET_BIT(TWCR_REG,TWINT_BIT) == I2C_STILL_PROCESSING);
    1072:	80 81       	ld	r24, Z
    1074:	88 23       	and	r24, r24
    1076:	ec f7       	brge	.-6      	; 0x1072 <M_I2C_Void_StartCondition+0x10>
	while((TWSR_REG & 0xF8) != I2C_START_CONDITION_HAS_BEEN_TRANSMITTED);
    1078:	e1 e2       	ldi	r30, 0x21	; 33
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	88 7f       	andi	r24, 0xF8	; 248
    1080:	88 30       	cpi	r24, 0x08	; 8
    1082:	e1 f7       	brne	.-8      	; 0x107c <M_I2C_Void_StartCondition+0x1a>
}
    1084:	08 95       	ret

00001086 <M_I2C_Void_StopCondition>:
/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
void M_I2C_Void_StopCondition(void)
{
	SET_BIT(TWCR_REG,TWSTO_BIT);
    1086:	e6 e5       	ldi	r30, 0x56	; 86
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	80 61       	ori	r24, 0x10	; 16
    108e:	80 83       	st	Z, r24
	SET_BIT(TWCR_REG,TWINT_BIT);          /* TO CLEAR THE FLAG */
    1090:	80 81       	ld	r24, Z
    1092:	80 68       	ori	r24, 0x80	; 128
    1094:	80 83       	st	Z, r24
}
    1096:	08 95       	ret

00001098 <M_I2C_Void_RepeatedStart>:
/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
void M_I2C_Void_RepeatedStart(void)
{
	SET_BIT(TWCR_REG,TWSTA_BIT);
    1098:	e6 e5       	ldi	r30, 0x56	; 86
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	80 62       	ori	r24, 0x20	; 32
    10a0:	80 83       	st	Z, r24
	SET_BIT(TWCR_REG,TWINT_BIT);          /* TO CLEAR THE FLAG */
    10a2:	80 81       	ld	r24, Z
    10a4:	80 68       	ori	r24, 0x80	; 128
    10a6:	80 83       	st	Z, r24
	while(GET_BIT(TWCR_REG,TWINT_BIT) == I2C_STILL_PROCESSING);
    10a8:	80 81       	ld	r24, Z
    10aa:	88 23       	and	r24, r24
    10ac:	ec f7       	brge	.-6      	; 0x10a8 <M_I2C_Void_RepeatedStart+0x10>
	while((TWSR_REG & 0xF8) != I2C_REPEATED_START_COND);
    10ae:	e1 e2       	ldi	r30, 0x21	; 33
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	88 7f       	andi	r24, 0xF8	; 248
    10b6:	80 31       	cpi	r24, 0x10	; 16
    10b8:	e1 f7       	brne	.-8      	; 0x10b2 <M_I2C_Void_RepeatedStart+0x1a>
}
    10ba:	08 95       	ret

000010bc <M_I2C_Void_SendSlaveAddressWrite>:
/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
void M_I2C_Void_SendSlaveAddressWrite(u8 Copy_U8_SlaveAddress)
{
	TWDR_REG = (Copy_U8_SlaveAddress << 1);
    10bc:	88 0f       	add	r24, r24
    10be:	83 b9       	out	0x03, r24	; 3
	SET_BIT(TWCR_REG,TWINT_BIT);          /* TO CLEAR THE FLAG */
    10c0:	e6 e5       	ldi	r30, 0x56	; 86
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	80 68       	ori	r24, 0x80	; 128
    10c8:	80 83       	st	Z, r24
	while(GET_BIT(TWCR_REG,TWINT_BIT) == I2C_STILL_PROCESSING);
    10ca:	80 81       	ld	r24, Z
    10cc:	88 23       	and	r24, r24
    10ce:	ec f7       	brge	.-6      	; 0x10ca <M_I2C_Void_SendSlaveAddressWrite+0xe>
	while((TWSR_REG & 0xF8) != I2C_SEND_SLAVE_ADD_WRITE_ACK_REC);
    10d0:	e1 e2       	ldi	r30, 0x21	; 33
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	88 7f       	andi	r24, 0xF8	; 248
    10d8:	88 31       	cpi	r24, 0x18	; 24
    10da:	e1 f7       	brne	.-8      	; 0x10d4 <M_I2C_Void_SendSlaveAddressWrite+0x18>
}
    10dc:	08 95       	ret

000010de <M_I2C_Void_SendSlaveAddressRead>:
/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
void M_I2C_Void_SendSlaveAddressRead(u8 Copy_U8_SlaveAddress)
{
	TWDR_REG = (Copy_U8_SlaveAddress << 1) | 0x01;
    10de:	88 0f       	add	r24, r24
    10e0:	81 60       	ori	r24, 0x01	; 1
    10e2:	83 b9       	out	0x03, r24	; 3
	CLR_BIT(TWCR_REG,TWSTA_BIT);
    10e4:	e6 e5       	ldi	r30, 0x56	; 86
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	8f 7d       	andi	r24, 0xDF	; 223
    10ec:	80 83       	st	Z, r24
	SET_BIT(TWCR_REG,TWINT_BIT);          /* TO CLEAR THE FLAG */
    10ee:	80 81       	ld	r24, Z
    10f0:	80 68       	ori	r24, 0x80	; 128
    10f2:	80 83       	st	Z, r24
	while(GET_BIT(TWCR_REG,TWINT_BIT) == I2C_STILL_PROCESSING);
    10f4:	80 81       	ld	r24, Z
    10f6:	88 23       	and	r24, r24
    10f8:	ec f7       	brge	.-6      	; 0x10f4 <M_I2C_Void_SendSlaveAddressRead+0x16>
	while((TWSR_REG & 0xF8) != I2C_SEND_SLAVE_ADD_READ_ACK_REC);
    10fa:	e1 e2       	ldi	r30, 0x21	; 33
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	88 7f       	andi	r24, 0xF8	; 248
    1102:	80 34       	cpi	r24, 0x40	; 64
    1104:	e1 f7       	brne	.-8      	; 0x10fe <M_I2C_Void_SendSlaveAddressRead+0x20>
}
    1106:	08 95       	ret

00001108 <M_I2C_Void_SendByte>:
/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
void M_I2C_Void_SendByte(u8 Copy_U8_Data)
{
	TWDR_REG = Copy_U8_Data;
    1108:	83 b9       	out	0x03, r24	; 3
	CLR_BIT(TWCR_REG,TWSTA_BIT);
    110a:	e6 e5       	ldi	r30, 0x56	; 86
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	8f 7d       	andi	r24, 0xDF	; 223
    1112:	80 83       	st	Z, r24
	SET_BIT(TWCR_REG,TWINT_BIT);          /* TO CLEAR THE FLAG */
    1114:	80 81       	ld	r24, Z
    1116:	80 68       	ori	r24, 0x80	; 128
    1118:	80 83       	st	Z, r24
	while(GET_BIT(TWCR_REG,TWINT_BIT) == I2C_STILL_PROCESSING);
    111a:	80 81       	ld	r24, Z
    111c:	88 23       	and	r24, r24
    111e:	ec f7       	brge	.-6      	; 0x111a <M_I2C_Void_SendByte+0x12>
	while((TWSR_REG & 0xF8) != I2C_DATA_BYTE_TRANSMITTED_ACK_REC);
    1120:	e1 e2       	ldi	r30, 0x21	; 33
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	88 7f       	andi	r24, 0xF8	; 248
    1128:	88 32       	cpi	r24, 0x28	; 40
    112a:	e1 f7       	brne	.-8      	; 0x1124 <M_I2C_Void_SendByte+0x1c>
}
    112c:	08 95       	ret

0000112e <M_I2C_U8_ReadByte>:
/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
u8   M_I2C_U8_ReadByte(void)
{
	CLR_BIT(TWCR_REG,TWSTA_BIT);
    112e:	e6 e5       	ldi	r30, 0x56	; 86
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	8f 7d       	andi	r24, 0xDF	; 223
    1136:	80 83       	st	Z, r24
	SET_BIT(TWCR_REG,TWINT_BIT);          /* TO CLEAR THE FLAG */
    1138:	80 81       	ld	r24, Z
    113a:	80 68       	ori	r24, 0x80	; 128
    113c:	80 83       	st	Z, r24
	while(GET_BIT(TWCR_REG,TWINT_BIT) == I2C_STILL_PROCESSING);
    113e:	80 81       	ld	r24, Z
    1140:	88 23       	and	r24, r24
    1142:	ec f7       	brge	.-6      	; 0x113e <M_I2C_U8_ReadByte+0x10>
	//while((TWSR_REG & 0xF8) != I2C_READ_BYTE);
	return TWDR_REG;
    1144:	83 b1       	in	r24, 0x03	; 3
}
    1146:	08 95       	ret

00001148 <M_GIE_Void_GlobalInterruptEnable>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_GIE_Void_GlobalInterruptEnable(void)
{
	SET_BIT(SREG_REG,7);
    1148:	ef e5       	ldi	r30, 0x5F	; 95
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	80 68       	ori	r24, 0x80	; 128
    1150:	80 83       	st	Z, r24
}
    1152:	08 95       	ret

00001154 <M_GIE_Void_GlobalInterruptDisable>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_GIE_Void_GlobalInterruptDisable(void)
{
	CLR_BIT(SREG_REG,7);
    1154:	ef e5       	ldi	r30, 0x5F	; 95
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	8f 77       	andi	r24, 0x7F	; 127
    115c:	80 83       	st	Z, r24
}
    115e:	08 95       	ret

00001160 <M_DIO_Void_SetPinDirection>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinDirection(u8 Copy_U8_Number, u8 Copy_U8_State)
{
    1160:	28 2f       	mov	r18, r24
    1162:	36 2f       	mov	r19, r22

	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    1164:	6a e0       	ldi	r22, 0x0A	; 10
    1166:	0e 94 5e 11 	call	0x22bc	; 0x22bc <__udivmodqi4>
    116a:	49 2f       	mov	r20, r25
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    116c:	82 2f       	mov	r24, r18
    116e:	0e 94 5e 11 	call	0x22bc	; 0x22bc <__udivmodqi4>
	switch(Copy_U8_State)
    1172:	33 23       	and	r19, r19
    1174:	21 f0       	breq	.+8      	; 0x117e <M_DIO_Void_SetPinDirection+0x1e>
    1176:	31 30       	cpi	r19, 0x01	; 1
    1178:	09 f0       	breq	.+2      	; 0x117c <M_DIO_Void_SetPinDirection+0x1c>
    117a:	86 c0       	rjmp	.+268    	; 0x1288 <M_DIO_Void_SetPinDirection+0x128>
    117c:	46 c0       	rjmp	.+140    	; 0x120a <M_DIO_Void_SetPinDirection+0xaa>
	{
	case INPUT:
		switch(Local_U8_Group)
    117e:	82 30       	cpi	r24, 0x02	; 2
    1180:	d1 f0       	breq	.+52     	; 0x11b6 <M_DIO_Void_SetPinDirection+0x56>
    1182:	83 30       	cpi	r24, 0x03	; 3
    1184:	20 f4       	brcc	.+8      	; 0x118e <M_DIO_Void_SetPinDirection+0x2e>
    1186:	81 30       	cpi	r24, 0x01	; 1
    1188:	09 f0       	breq	.+2      	; 0x118c <M_DIO_Void_SetPinDirection+0x2c>
    118a:	7e c0       	rjmp	.+252    	; 0x1288 <M_DIO_Void_SetPinDirection+0x128>
    118c:	06 c0       	rjmp	.+12     	; 0x119a <M_DIO_Void_SetPinDirection+0x3a>
    118e:	83 30       	cpi	r24, 0x03	; 3
    1190:	01 f1       	breq	.+64     	; 0x11d2 <M_DIO_Void_SetPinDirection+0x72>
    1192:	84 30       	cpi	r24, 0x04	; 4
    1194:	09 f0       	breq	.+2      	; 0x1198 <M_DIO_Void_SetPinDirection+0x38>
    1196:	78 c0       	rjmp	.+240    	; 0x1288 <M_DIO_Void_SetPinDirection+0x128>
    1198:	2a c0       	rjmp	.+84     	; 0x11ee <M_DIO_Void_SetPinDirection+0x8e>
		{
		case 1: CLR_BIT(DDRA_REG,Local_U8_Bit); break;
    119a:	ea e3       	ldi	r30, 0x3A	; 58
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	20 81       	ld	r18, Z
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <M_DIO_Void_SetPinDirection+0x4a>
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	4a 95       	dec	r20
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <M_DIO_Void_SetPinDirection+0x46>
    11ae:	80 95       	com	r24
    11b0:	82 23       	and	r24, r18
    11b2:	80 83       	st	Z, r24
    11b4:	08 95       	ret
		case 2: CLR_BIT(DDRB_REG,Local_U8_Bit); break;
    11b6:	e7 e3       	ldi	r30, 0x37	; 55
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	20 81       	ld	r18, Z
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <M_DIO_Void_SetPinDirection+0x66>
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	4a 95       	dec	r20
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <M_DIO_Void_SetPinDirection+0x62>
    11ca:	80 95       	com	r24
    11cc:	82 23       	and	r24, r18
    11ce:	80 83       	st	Z, r24
    11d0:	08 95       	ret
		case 3: CLR_BIT(DDRC_REG,Local_U8_Bit); break;
    11d2:	e4 e3       	ldi	r30, 0x34	; 52
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	20 81       	ld	r18, Z
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <M_DIO_Void_SetPinDirection+0x82>
    11de:	88 0f       	add	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	4a 95       	dec	r20
    11e4:	e2 f7       	brpl	.-8      	; 0x11de <M_DIO_Void_SetPinDirection+0x7e>
    11e6:	80 95       	com	r24
    11e8:	82 23       	and	r24, r18
    11ea:	80 83       	st	Z, r24
    11ec:	08 95       	ret
		case 4: CLR_BIT(DDRD_REG,Local_U8_Bit); break;
    11ee:	e1 e3       	ldi	r30, 0x31	; 49
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	20 81       	ld	r18, Z
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <M_DIO_Void_SetPinDirection+0x9e>
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	4a 95       	dec	r20
    1200:	e2 f7       	brpl	.-8      	; 0x11fa <M_DIO_Void_SetPinDirection+0x9a>
    1202:	80 95       	com	r24
    1204:	82 23       	and	r24, r18
    1206:	80 83       	st	Z, r24
    1208:	08 95       	ret
		default:                                break;
		}
		break;
		case OUTPUT:
			switch(Local_U8_Group)
    120a:	82 30       	cpi	r24, 0x02	; 2
    120c:	b9 f0       	breq	.+46     	; 0x123c <M_DIO_Void_SetPinDirection+0xdc>
    120e:	83 30       	cpi	r24, 0x03	; 3
    1210:	18 f4       	brcc	.+6      	; 0x1218 <M_DIO_Void_SetPinDirection+0xb8>
    1212:	81 30       	cpi	r24, 0x01	; 1
    1214:	c9 f5       	brne	.+114    	; 0x1288 <M_DIO_Void_SetPinDirection+0x128>
    1216:	05 c0       	rjmp	.+10     	; 0x1222 <M_DIO_Void_SetPinDirection+0xc2>
    1218:	83 30       	cpi	r24, 0x03	; 3
    121a:	e9 f0       	breq	.+58     	; 0x1256 <M_DIO_Void_SetPinDirection+0xf6>
    121c:	84 30       	cpi	r24, 0x04	; 4
    121e:	a1 f5       	brne	.+104    	; 0x1288 <M_DIO_Void_SetPinDirection+0x128>
    1220:	27 c0       	rjmp	.+78     	; 0x1270 <M_DIO_Void_SetPinDirection+0x110>
			{
			case 1: SET_BIT(DDRA_REG,Local_U8_Bit); break;
    1222:	ea e3       	ldi	r30, 0x3A	; 58
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	20 81       	ld	r18, Z
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <M_DIO_Void_SetPinDirection+0xd2>
    122e:	88 0f       	add	r24, r24
    1230:	99 1f       	adc	r25, r25
    1232:	4a 95       	dec	r20
    1234:	e2 f7       	brpl	.-8      	; 0x122e <M_DIO_Void_SetPinDirection+0xce>
    1236:	28 2b       	or	r18, r24
    1238:	20 83       	st	Z, r18
    123a:	08 95       	ret
			case 2: SET_BIT(DDRB_REG,Local_U8_Bit); break;
    123c:	e7 e3       	ldi	r30, 0x37	; 55
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	20 81       	ld	r18, Z
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	02 c0       	rjmp	.+4      	; 0x124c <M_DIO_Void_SetPinDirection+0xec>
    1248:	88 0f       	add	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	4a 95       	dec	r20
    124e:	e2 f7       	brpl	.-8      	; 0x1248 <M_DIO_Void_SetPinDirection+0xe8>
    1250:	28 2b       	or	r18, r24
    1252:	20 83       	st	Z, r18
    1254:	08 95       	ret
			case 3: SET_BIT(DDRC_REG,Local_U8_Bit); break;
    1256:	e4 e3       	ldi	r30, 0x34	; 52
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	20 81       	ld	r18, Z
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <M_DIO_Void_SetPinDirection+0x106>
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	4a 95       	dec	r20
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <M_DIO_Void_SetPinDirection+0x102>
    126a:	28 2b       	or	r18, r24
    126c:	20 83       	st	Z, r18
    126e:	08 95       	ret
			case 4: SET_BIT(DDRD_REG,Local_U8_Bit); break;
    1270:	e1 e3       	ldi	r30, 0x31	; 49
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	20 81       	ld	r18, Z
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <M_DIO_Void_SetPinDirection+0x120>
    127c:	88 0f       	add	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	4a 95       	dec	r20
    1282:	e2 f7       	brpl	.-8      	; 0x127c <M_DIO_Void_SetPinDirection+0x11c>
    1284:	28 2b       	or	r18, r24
    1286:	20 83       	st	Z, r18
    1288:	08 95       	ret

0000128a <M_DIO_Void_SetPinValue>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinValue(u8 Copy_U8_Number, u8 Copy_U8_State)
{
    128a:	28 2f       	mov	r18, r24
    128c:	36 2f       	mov	r19, r22
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    128e:	6a e0       	ldi	r22, 0x0A	; 10
    1290:	0e 94 5e 11 	call	0x22bc	; 0x22bc <__udivmodqi4>
    1294:	49 2f       	mov	r20, r25
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    1296:	82 2f       	mov	r24, r18
    1298:	0e 94 5e 11 	call	0x22bc	; 0x22bc <__udivmodqi4>
	switch(Copy_U8_State)
    129c:	33 23       	and	r19, r19
    129e:	21 f0       	breq	.+8      	; 0x12a8 <M_DIO_Void_SetPinValue+0x1e>
    12a0:	31 30       	cpi	r19, 0x01	; 1
    12a2:	09 f0       	breq	.+2      	; 0x12a6 <M_DIO_Void_SetPinValue+0x1c>
    12a4:	86 c0       	rjmp	.+268    	; 0x13b2 <M_DIO_Void_SetPinValue+0x128>
    12a6:	46 c0       	rjmp	.+140    	; 0x1334 <M_DIO_Void_SetPinValue+0xaa>
	{
	case LOW:
		switch(Local_U8_Group)
    12a8:	82 30       	cpi	r24, 0x02	; 2
    12aa:	d1 f0       	breq	.+52     	; 0x12e0 <M_DIO_Void_SetPinValue+0x56>
    12ac:	83 30       	cpi	r24, 0x03	; 3
    12ae:	20 f4       	brcc	.+8      	; 0x12b8 <M_DIO_Void_SetPinValue+0x2e>
    12b0:	81 30       	cpi	r24, 0x01	; 1
    12b2:	09 f0       	breq	.+2      	; 0x12b6 <M_DIO_Void_SetPinValue+0x2c>
    12b4:	7e c0       	rjmp	.+252    	; 0x13b2 <M_DIO_Void_SetPinValue+0x128>
    12b6:	06 c0       	rjmp	.+12     	; 0x12c4 <M_DIO_Void_SetPinValue+0x3a>
    12b8:	83 30       	cpi	r24, 0x03	; 3
    12ba:	01 f1       	breq	.+64     	; 0x12fc <M_DIO_Void_SetPinValue+0x72>
    12bc:	84 30       	cpi	r24, 0x04	; 4
    12be:	09 f0       	breq	.+2      	; 0x12c2 <M_DIO_Void_SetPinValue+0x38>
    12c0:	78 c0       	rjmp	.+240    	; 0x13b2 <M_DIO_Void_SetPinValue+0x128>
    12c2:	2a c0       	rjmp	.+84     	; 0x1318 <M_DIO_Void_SetPinValue+0x8e>
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Bit); break;
    12c4:	eb e3       	ldi	r30, 0x3B	; 59
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	20 81       	ld	r18, Z
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <M_DIO_Void_SetPinValue+0x4a>
    12d0:	88 0f       	add	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	4a 95       	dec	r20
    12d6:	e2 f7       	brpl	.-8      	; 0x12d0 <M_DIO_Void_SetPinValue+0x46>
    12d8:	80 95       	com	r24
    12da:	82 23       	and	r24, r18
    12dc:	80 83       	st	Z, r24
    12de:	08 95       	ret
		case 2: CLR_BIT(PORTB_REG,Local_U8_Bit); break;
    12e0:	e8 e3       	ldi	r30, 0x38	; 56
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	20 81       	ld	r18, Z
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <M_DIO_Void_SetPinValue+0x66>
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	4a 95       	dec	r20
    12f2:	e2 f7       	brpl	.-8      	; 0x12ec <M_DIO_Void_SetPinValue+0x62>
    12f4:	80 95       	com	r24
    12f6:	82 23       	and	r24, r18
    12f8:	80 83       	st	Z, r24
    12fa:	08 95       	ret
		case 3: CLR_BIT(PORTC_REG,Local_U8_Bit); break;
    12fc:	e5 e3       	ldi	r30, 0x35	; 53
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	20 81       	ld	r18, Z
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	02 c0       	rjmp	.+4      	; 0x130c <M_DIO_Void_SetPinValue+0x82>
    1308:	88 0f       	add	r24, r24
    130a:	99 1f       	adc	r25, r25
    130c:	4a 95       	dec	r20
    130e:	e2 f7       	brpl	.-8      	; 0x1308 <M_DIO_Void_SetPinValue+0x7e>
    1310:	80 95       	com	r24
    1312:	82 23       	and	r24, r18
    1314:	80 83       	st	Z, r24
    1316:	08 95       	ret
		case 4: CLR_BIT(PORTD_REG,Local_U8_Bit); break;
    1318:	e2 e3       	ldi	r30, 0x32	; 50
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	20 81       	ld	r18, Z
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <M_DIO_Void_SetPinValue+0x9e>
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	4a 95       	dec	r20
    132a:	e2 f7       	brpl	.-8      	; 0x1324 <M_DIO_Void_SetPinValue+0x9a>
    132c:	80 95       	com	r24
    132e:	82 23       	and	r24, r18
    1330:	80 83       	st	Z, r24
    1332:	08 95       	ret
		default:                                 break;
		}
		break;
		case HIGH:
			switch(Local_U8_Group)
    1334:	82 30       	cpi	r24, 0x02	; 2
    1336:	b9 f0       	breq	.+46     	; 0x1366 <M_DIO_Void_SetPinValue+0xdc>
    1338:	83 30       	cpi	r24, 0x03	; 3
    133a:	18 f4       	brcc	.+6      	; 0x1342 <M_DIO_Void_SetPinValue+0xb8>
    133c:	81 30       	cpi	r24, 0x01	; 1
    133e:	c9 f5       	brne	.+114    	; 0x13b2 <M_DIO_Void_SetPinValue+0x128>
    1340:	05 c0       	rjmp	.+10     	; 0x134c <M_DIO_Void_SetPinValue+0xc2>
    1342:	83 30       	cpi	r24, 0x03	; 3
    1344:	e9 f0       	breq	.+58     	; 0x1380 <M_DIO_Void_SetPinValue+0xf6>
    1346:	84 30       	cpi	r24, 0x04	; 4
    1348:	a1 f5       	brne	.+104    	; 0x13b2 <M_DIO_Void_SetPinValue+0x128>
    134a:	27 c0       	rjmp	.+78     	; 0x139a <M_DIO_Void_SetPinValue+0x110>
			{
			case 1: SET_BIT(PORTA_REG,Local_U8_Bit); break;
    134c:	eb e3       	ldi	r30, 0x3B	; 59
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	20 81       	ld	r18, Z
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	02 c0       	rjmp	.+4      	; 0x135c <M_DIO_Void_SetPinValue+0xd2>
    1358:	88 0f       	add	r24, r24
    135a:	99 1f       	adc	r25, r25
    135c:	4a 95       	dec	r20
    135e:	e2 f7       	brpl	.-8      	; 0x1358 <M_DIO_Void_SetPinValue+0xce>
    1360:	28 2b       	or	r18, r24
    1362:	20 83       	st	Z, r18
    1364:	08 95       	ret
			case 2: SET_BIT(PORTB_REG,Local_U8_Bit); break;
    1366:	e8 e3       	ldi	r30, 0x38	; 56
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	20 81       	ld	r18, Z
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <M_DIO_Void_SetPinValue+0xec>
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	4a 95       	dec	r20
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <M_DIO_Void_SetPinValue+0xe8>
    137a:	28 2b       	or	r18, r24
    137c:	20 83       	st	Z, r18
    137e:	08 95       	ret
			case 3: SET_BIT(PORTC_REG,Local_U8_Bit); break;
    1380:	e5 e3       	ldi	r30, 0x35	; 53
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	20 81       	ld	r18, Z
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <M_DIO_Void_SetPinValue+0x106>
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	4a 95       	dec	r20
    1392:	e2 f7       	brpl	.-8      	; 0x138c <M_DIO_Void_SetPinValue+0x102>
    1394:	28 2b       	or	r18, r24
    1396:	20 83       	st	Z, r18
    1398:	08 95       	ret
			case 4: SET_BIT(PORTD_REG,Local_U8_Bit); break;
    139a:	e2 e3       	ldi	r30, 0x32	; 50
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	20 81       	ld	r18, Z
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <M_DIO_Void_SetPinValue+0x120>
    13a6:	88 0f       	add	r24, r24
    13a8:	99 1f       	adc	r25, r25
    13aa:	4a 95       	dec	r20
    13ac:	e2 f7       	brpl	.-8      	; 0x13a6 <M_DIO_Void_SetPinValue+0x11c>
    13ae:	28 2b       	or	r18, r24
    13b0:	20 83       	st	Z, r18
    13b2:	08 95       	ret

000013b4 <M_DIO_Void_GetPinValue>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
u8   M_DIO_Void_GetPinValue(u8 Copy_U8_Number)
{
    13b4:	28 2f       	mov	r18, r24
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    13b6:	6a e0       	ldi	r22, 0x0A	; 10
    13b8:	0e 94 5e 11 	call	0x22bc	; 0x22bc <__udivmodqi4>
    13bc:	39 2f       	mov	r19, r25
	u8 Local_U8_Group  = Copy_U8_Number / 10;
	u8 Local_U8_Reading = 0;
	switch(Local_U8_Group)
    13be:	82 2f       	mov	r24, r18
    13c0:	0e 94 5e 11 	call	0x22bc	; 0x22bc <__udivmodqi4>
    13c4:	82 30       	cpi	r24, 0x02	; 2
    13c6:	a1 f0       	breq	.+40     	; 0x13f0 <M_DIO_Void_GetPinValue+0x3c>
    13c8:	83 30       	cpi	r24, 0x03	; 3
    13ca:	18 f4       	brcc	.+6      	; 0x13d2 <M_DIO_Void_GetPinValue+0x1e>
    13cc:	81 30       	cpi	r24, 0x01	; 1
    13ce:	29 f4       	brne	.+10     	; 0x13da <M_DIO_Void_GetPinValue+0x26>
    13d0:	06 c0       	rjmp	.+12     	; 0x13de <M_DIO_Void_GetPinValue+0x2a>
    13d2:	83 30       	cpi	r24, 0x03	; 3
    13d4:	b1 f0       	breq	.+44     	; 0x1402 <M_DIO_Void_GetPinValue+0x4e>
    13d6:	84 30       	cpi	r24, 0x04	; 4
    13d8:	e9 f0       	breq	.+58     	; 0x1414 <M_DIO_Void_GetPinValue+0x60>
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	08 95       	ret
	{
	case 1: Local_U8_Reading = GET_BIT(PINA_REG,Local_U8_Bit); break;
    13de:	89 b3       	in	r24, 0x19	; 25
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <M_DIO_Void_GetPinValue+0x34>
    13e4:	95 95       	asr	r25
    13e6:	87 95       	ror	r24
    13e8:	3a 95       	dec	r19
    13ea:	e2 f7       	brpl	.-8      	; 0x13e4 <M_DIO_Void_GetPinValue+0x30>
    13ec:	81 70       	andi	r24, 0x01	; 1
    13ee:	08 95       	ret
	case 2: Local_U8_Reading = GET_BIT(PINB_REG,Local_U8_Bit); break;
    13f0:	86 b3       	in	r24, 0x16	; 22
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <M_DIO_Void_GetPinValue+0x46>
    13f6:	95 95       	asr	r25
    13f8:	87 95       	ror	r24
    13fa:	3a 95       	dec	r19
    13fc:	e2 f7       	brpl	.-8      	; 0x13f6 <M_DIO_Void_GetPinValue+0x42>
    13fe:	81 70       	andi	r24, 0x01	; 1
    1400:	08 95       	ret
	case 3: Local_U8_Reading = GET_BIT(PINC_REG,Local_U8_Bit); break;
    1402:	83 b3       	in	r24, 0x13	; 19
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	02 c0       	rjmp	.+4      	; 0x140c <M_DIO_Void_GetPinValue+0x58>
    1408:	95 95       	asr	r25
    140a:	87 95       	ror	r24
    140c:	3a 95       	dec	r19
    140e:	e2 f7       	brpl	.-8      	; 0x1408 <M_DIO_Void_GetPinValue+0x54>
    1410:	81 70       	andi	r24, 0x01	; 1
    1412:	08 95       	ret
	case 4: Local_U8_Reading = GET_BIT(PIND_REG,Local_U8_Bit); break;
    1414:	80 b3       	in	r24, 0x10	; 16
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	02 c0       	rjmp	.+4      	; 0x141e <M_DIO_Void_GetPinValue+0x6a>
    141a:	95 95       	asr	r25
    141c:	87 95       	ror	r24
    141e:	3a 95       	dec	r19
    1420:	e2 f7       	brpl	.-8      	; 0x141a <M_DIO_Void_GetPinValue+0x66>
    1422:	81 70       	andi	r24, 0x01	; 1
	default:                                                   break;
	}
	return Local_U8_Reading ;
}
    1424:	08 95       	ret

00001426 <M_DIO_Void_TogPin>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_TogPin(u8 Copy_U8_Number)
{
    1426:	28 2f       	mov	r18, r24
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    1428:	6a e0       	ldi	r22, 0x0A	; 10
    142a:	0e 94 5e 11 	call	0x22bc	; 0x22bc <__udivmodqi4>
    142e:	39 2f       	mov	r19, r25
	u8 Local_U8_Group  = Copy_U8_Number / 10;
	switch(Local_U8_Group)
    1430:	82 2f       	mov	r24, r18
    1432:	0e 94 5e 11 	call	0x22bc	; 0x22bc <__udivmodqi4>
    1436:	82 30       	cpi	r24, 0x02	; 2
    1438:	b9 f0       	breq	.+46     	; 0x1468 <M_DIO_Void_TogPin+0x42>
    143a:	83 30       	cpi	r24, 0x03	; 3
    143c:	18 f4       	brcc	.+6      	; 0x1444 <M_DIO_Void_TogPin+0x1e>
    143e:	81 30       	cpi	r24, 0x01	; 1
    1440:	c9 f5       	brne	.+114    	; 0x14b4 <M_DIO_Void_TogPin+0x8e>
    1442:	05 c0       	rjmp	.+10     	; 0x144e <M_DIO_Void_TogPin+0x28>
    1444:	83 30       	cpi	r24, 0x03	; 3
    1446:	e9 f0       	breq	.+58     	; 0x1482 <M_DIO_Void_TogPin+0x5c>
    1448:	84 30       	cpi	r24, 0x04	; 4
    144a:	a1 f5       	brne	.+104    	; 0x14b4 <M_DIO_Void_TogPin+0x8e>
    144c:	27 c0       	rjmp	.+78     	; 0x149c <M_DIO_Void_TogPin+0x76>
	{
	case 1: TOG_BIT(PORTA_REG,Local_U8_Bit); break;
    144e:	eb e3       	ldi	r30, 0x3B	; 59
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	20 81       	ld	r18, Z
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	02 c0       	rjmp	.+4      	; 0x145e <M_DIO_Void_TogPin+0x38>
    145a:	88 0f       	add	r24, r24
    145c:	99 1f       	adc	r25, r25
    145e:	3a 95       	dec	r19
    1460:	e2 f7       	brpl	.-8      	; 0x145a <M_DIO_Void_TogPin+0x34>
    1462:	28 27       	eor	r18, r24
    1464:	20 83       	st	Z, r18
    1466:	08 95       	ret
	case 2: TOG_BIT(PORTB_REG,Local_U8_Bit); break;
    1468:	e8 e3       	ldi	r30, 0x38	; 56
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	20 81       	ld	r18, Z
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <M_DIO_Void_TogPin+0x52>
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	3a 95       	dec	r19
    147a:	e2 f7       	brpl	.-8      	; 0x1474 <M_DIO_Void_TogPin+0x4e>
    147c:	28 27       	eor	r18, r24
    147e:	20 83       	st	Z, r18
    1480:	08 95       	ret
	case 3: TOG_BIT(PORTC_REG,Local_U8_Bit); break;
    1482:	e5 e3       	ldi	r30, 0x35	; 53
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	20 81       	ld	r18, Z
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <M_DIO_Void_TogPin+0x6c>
    148e:	88 0f       	add	r24, r24
    1490:	99 1f       	adc	r25, r25
    1492:	3a 95       	dec	r19
    1494:	e2 f7       	brpl	.-8      	; 0x148e <M_DIO_Void_TogPin+0x68>
    1496:	28 27       	eor	r18, r24
    1498:	20 83       	st	Z, r18
    149a:	08 95       	ret
	case 4: TOG_BIT(PORTD_REG,Local_U8_Bit); break;
    149c:	e2 e3       	ldi	r30, 0x32	; 50
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	20 81       	ld	r18, Z
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <M_DIO_Void_TogPin+0x86>
    14a8:	88 0f       	add	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	3a 95       	dec	r19
    14ae:	e2 f7       	brpl	.-8      	; 0x14a8 <M_DIO_Void_TogPin+0x82>
    14b0:	28 27       	eor	r18, r24
    14b2:	20 83       	st	Z, r18
    14b4:	08 95       	ret

000014b6 <M_DIO_Void_SetPinPullUpRes>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinPullUpRes(u8 Copy_U8_Number,u8 Copy_U8_State)
{
    14b6:	28 2f       	mov	r18, r24
    14b8:	36 2f       	mov	r19, r22
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    14ba:	6a e0       	ldi	r22, 0x0A	; 10
    14bc:	0e 94 5e 11 	call	0x22bc	; 0x22bc <__udivmodqi4>
    14c0:	49 2f       	mov	r20, r25
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    14c2:	82 2f       	mov	r24, r18
    14c4:	0e 94 5e 11 	call	0x22bc	; 0x22bc <__udivmodqi4>
	switch(Copy_U8_State)
    14c8:	33 23       	and	r19, r19
    14ca:	21 f0       	breq	.+8      	; 0x14d4 <M_DIO_Void_SetPinPullUpRes+0x1e>
    14cc:	31 30       	cpi	r19, 0x01	; 1
    14ce:	09 f0       	breq	.+2      	; 0x14d2 <M_DIO_Void_SetPinPullUpRes+0x1c>
    14d0:	86 c0       	rjmp	.+268    	; 0x15de <M_DIO_Void_SetPinPullUpRes+0x128>
    14d2:	46 c0       	rjmp	.+140    	; 0x1560 <M_DIO_Void_SetPinPullUpRes+0xaa>
	{
	case DISABLE:
		switch(Local_U8_Group)
    14d4:	82 30       	cpi	r24, 0x02	; 2
    14d6:	d1 f0       	breq	.+52     	; 0x150c <M_DIO_Void_SetPinPullUpRes+0x56>
    14d8:	83 30       	cpi	r24, 0x03	; 3
    14da:	20 f4       	brcc	.+8      	; 0x14e4 <M_DIO_Void_SetPinPullUpRes+0x2e>
    14dc:	81 30       	cpi	r24, 0x01	; 1
    14de:	09 f0       	breq	.+2      	; 0x14e2 <M_DIO_Void_SetPinPullUpRes+0x2c>
    14e0:	7e c0       	rjmp	.+252    	; 0x15de <M_DIO_Void_SetPinPullUpRes+0x128>
    14e2:	06 c0       	rjmp	.+12     	; 0x14f0 <M_DIO_Void_SetPinPullUpRes+0x3a>
    14e4:	83 30       	cpi	r24, 0x03	; 3
    14e6:	01 f1       	breq	.+64     	; 0x1528 <M_DIO_Void_SetPinPullUpRes+0x72>
    14e8:	84 30       	cpi	r24, 0x04	; 4
    14ea:	09 f0       	breq	.+2      	; 0x14ee <M_DIO_Void_SetPinPullUpRes+0x38>
    14ec:	78 c0       	rjmp	.+240    	; 0x15de <M_DIO_Void_SetPinPullUpRes+0x128>
    14ee:	2a c0       	rjmp	.+84     	; 0x1544 <M_DIO_Void_SetPinPullUpRes+0x8e>
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Bit); break;
    14f0:	eb e3       	ldi	r30, 0x3B	; 59
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	20 81       	ld	r18, Z
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	02 c0       	rjmp	.+4      	; 0x1500 <M_DIO_Void_SetPinPullUpRes+0x4a>
    14fc:	88 0f       	add	r24, r24
    14fe:	99 1f       	adc	r25, r25
    1500:	4a 95       	dec	r20
    1502:	e2 f7       	brpl	.-8      	; 0x14fc <M_DIO_Void_SetPinPullUpRes+0x46>
    1504:	80 95       	com	r24
    1506:	82 23       	and	r24, r18
    1508:	80 83       	st	Z, r24
    150a:	08 95       	ret
		case 2: CLR_BIT(PORTB_REG,Local_U8_Bit); break;
    150c:	e8 e3       	ldi	r30, 0x38	; 56
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	20 81       	ld	r18, Z
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	02 c0       	rjmp	.+4      	; 0x151c <M_DIO_Void_SetPinPullUpRes+0x66>
    1518:	88 0f       	add	r24, r24
    151a:	99 1f       	adc	r25, r25
    151c:	4a 95       	dec	r20
    151e:	e2 f7       	brpl	.-8      	; 0x1518 <M_DIO_Void_SetPinPullUpRes+0x62>
    1520:	80 95       	com	r24
    1522:	82 23       	and	r24, r18
    1524:	80 83       	st	Z, r24
    1526:	08 95       	ret
		case 3: CLR_BIT(PORTC_REG,Local_U8_Bit); break;
    1528:	e5 e3       	ldi	r30, 0x35	; 53
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	20 81       	ld	r18, Z
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <M_DIO_Void_SetPinPullUpRes+0x82>
    1534:	88 0f       	add	r24, r24
    1536:	99 1f       	adc	r25, r25
    1538:	4a 95       	dec	r20
    153a:	e2 f7       	brpl	.-8      	; 0x1534 <M_DIO_Void_SetPinPullUpRes+0x7e>
    153c:	80 95       	com	r24
    153e:	82 23       	and	r24, r18
    1540:	80 83       	st	Z, r24
    1542:	08 95       	ret
		case 4: CLR_BIT(PORTD_REG,Local_U8_Bit); break;
    1544:	e2 e3       	ldi	r30, 0x32	; 50
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	20 81       	ld	r18, Z
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	02 c0       	rjmp	.+4      	; 0x1554 <M_DIO_Void_SetPinPullUpRes+0x9e>
    1550:	88 0f       	add	r24, r24
    1552:	99 1f       	adc	r25, r25
    1554:	4a 95       	dec	r20
    1556:	e2 f7       	brpl	.-8      	; 0x1550 <M_DIO_Void_SetPinPullUpRes+0x9a>
    1558:	80 95       	com	r24
    155a:	82 23       	and	r24, r18
    155c:	80 83       	st	Z, r24
    155e:	08 95       	ret
		default:                                 break;
		}
		break;
		case ENABLE:
			switch(Local_U8_Group)
    1560:	82 30       	cpi	r24, 0x02	; 2
    1562:	b9 f0       	breq	.+46     	; 0x1592 <M_DIO_Void_SetPinPullUpRes+0xdc>
    1564:	83 30       	cpi	r24, 0x03	; 3
    1566:	18 f4       	brcc	.+6      	; 0x156e <M_DIO_Void_SetPinPullUpRes+0xb8>
    1568:	81 30       	cpi	r24, 0x01	; 1
    156a:	c9 f5       	brne	.+114    	; 0x15de <M_DIO_Void_SetPinPullUpRes+0x128>
    156c:	05 c0       	rjmp	.+10     	; 0x1578 <M_DIO_Void_SetPinPullUpRes+0xc2>
    156e:	83 30       	cpi	r24, 0x03	; 3
    1570:	e9 f0       	breq	.+58     	; 0x15ac <M_DIO_Void_SetPinPullUpRes+0xf6>
    1572:	84 30       	cpi	r24, 0x04	; 4
    1574:	a1 f5       	brne	.+104    	; 0x15de <M_DIO_Void_SetPinPullUpRes+0x128>
    1576:	27 c0       	rjmp	.+78     	; 0x15c6 <M_DIO_Void_SetPinPullUpRes+0x110>
			{
			case 1: SET_BIT(PORTA_REG,Local_U8_Bit); break;
    1578:	eb e3       	ldi	r30, 0x3B	; 59
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	20 81       	ld	r18, Z
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <M_DIO_Void_SetPinPullUpRes+0xd2>
    1584:	88 0f       	add	r24, r24
    1586:	99 1f       	adc	r25, r25
    1588:	4a 95       	dec	r20
    158a:	e2 f7       	brpl	.-8      	; 0x1584 <M_DIO_Void_SetPinPullUpRes+0xce>
    158c:	28 2b       	or	r18, r24
    158e:	20 83       	st	Z, r18
    1590:	08 95       	ret
			case 2: SET_BIT(PORTB_REG,Local_U8_Bit); break;
    1592:	e8 e3       	ldi	r30, 0x38	; 56
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	20 81       	ld	r18, Z
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <M_DIO_Void_SetPinPullUpRes+0xec>
    159e:	88 0f       	add	r24, r24
    15a0:	99 1f       	adc	r25, r25
    15a2:	4a 95       	dec	r20
    15a4:	e2 f7       	brpl	.-8      	; 0x159e <M_DIO_Void_SetPinPullUpRes+0xe8>
    15a6:	28 2b       	or	r18, r24
    15a8:	20 83       	st	Z, r18
    15aa:	08 95       	ret
			case 3: SET_BIT(PORTC_REG,Local_U8_Bit); break;
    15ac:	e5 e3       	ldi	r30, 0x35	; 53
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	20 81       	ld	r18, Z
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	02 c0       	rjmp	.+4      	; 0x15bc <M_DIO_Void_SetPinPullUpRes+0x106>
    15b8:	88 0f       	add	r24, r24
    15ba:	99 1f       	adc	r25, r25
    15bc:	4a 95       	dec	r20
    15be:	e2 f7       	brpl	.-8      	; 0x15b8 <M_DIO_Void_SetPinPullUpRes+0x102>
    15c0:	28 2b       	or	r18, r24
    15c2:	20 83       	st	Z, r18
    15c4:	08 95       	ret
			case 4: SET_BIT(PORTD_REG,Local_U8_Bit); break;
    15c6:	e2 e3       	ldi	r30, 0x32	; 50
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	20 81       	ld	r18, Z
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <M_DIO_Void_SetPinPullUpRes+0x120>
    15d2:	88 0f       	add	r24, r24
    15d4:	99 1f       	adc	r25, r25
    15d6:	4a 95       	dec	r20
    15d8:	e2 f7       	brpl	.-8      	; 0x15d2 <M_DIO_Void_SetPinPullUpRes+0x11c>
    15da:	28 2b       	or	r18, r24
    15dc:	20 83       	st	Z, r18
    15de:	08 95       	ret

000015e0 <M_ADC_Void_ADCInit>:
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_ADC_Void_ADCInit(void)
{
#if   ADC_VREF   ==   AVCC
	SET_BIT(ADMUX_REG,REFS0_BIT);
    15e0:	e7 e2       	ldi	r30, 0x27	; 39
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	80 64       	ori	r24, 0x40	; 64
    15e8:	80 83       	st	Z, r24
	CLR_BIT(ADMUX_REG,REFS1_BIT);
    15ea:	80 81       	ld	r24, Z
    15ec:	8f 77       	andi	r24, 0x7F	; 127
    15ee:	80 83       	st	Z, r24
#elif ADC_VREF   ==   _2V5
	SET_BIT(ADMUX_REG,REFS0_BIT);
	SET_BIT(ADMUX_REG,REFS1_BIT);
#endif
	/* TO SELECT RIGHT ADJUST */
	CLR_BIT(ADMUX_REG,ADLAR_BIT);
    15f0:	80 81       	ld	r24, Z
    15f2:	8f 7d       	andi	r24, 0xDF	; 223
    15f4:	80 83       	st	Z, r24
#if   ADC_PRESCALER_DV   ==   128
	SET_BIT(ADCSRA_REG,ADPS0_BIT);
    15f6:	e6 e2       	ldi	r30, 0x26	; 38
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	81 60       	ori	r24, 0x01	; 1
    15fe:	80 83       	st	Z, r24
	SET_BIT(ADCSRA_REG,ADPS1_BIT);
    1600:	80 81       	ld	r24, Z
    1602:	82 60       	ori	r24, 0x02	; 2
    1604:	80 83       	st	Z, r24
	SET_BIT(ADCSRA_REG,ADPS2_BIT);
    1606:	80 81       	ld	r24, Z
    1608:	84 60       	ori	r24, 0x04	; 4
    160a:	80 83       	st	Z, r24
	SET_BIT(ADCSRA_REG,ADPS1_BIT);
	SET_BIT(ADCSRA_REG,ADPS2_BIT);
#endif

	/* TO ENABLE AUTO TRIGGER MODE */
	SET_BIT(ADCSRA_REG,ADATE_BIT);
    160c:	80 81       	ld	r24, Z
    160e:	80 62       	ori	r24, 0x20	; 32
    1610:	80 83       	st	Z, r24
	/* TO ENABLE ADC CIRCUIT */
	SET_BIT(ADCSRA_REG,ADEN_BIT);
    1612:	80 81       	ld	r24, Z
    1614:	80 68       	ori	r24, 0x80	; 128
    1616:	80 83       	st	Z, r24
	/* TO START CONVERSION */
	SET_BIT(ADCSRA_REG,ADSC_BIT);
    1618:	80 81       	ld	r24, Z
    161a:	80 64       	ori	r24, 0x40	; 64
    161c:	80 83       	st	Z, r24
}
    161e:	08 95       	ret

00001620 <M_ADC_Void_ADCRead>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
u16  M_ADC_Void_ADCRead(u8 Copy_U8_ADCChannel)
{
	ADMUX_REG = (ADMUX_REG & ADMUX_MASK) | Copy_U8_ADCChannel;
    1620:	e7 e2       	ldi	r30, 0x27	; 39
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	90 81       	ld	r25, Z
    1626:	90 7e       	andi	r25, 0xE0	; 224
    1628:	89 2b       	or	r24, r25
    162a:	80 83       	st	Z, r24
    162c:	20 e0       	ldi	r18, 0x00	; 0
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	40 e0       	ldi	r20, 0x00	; 0
    1632:	50 e0       	ldi	r21, 0x00	; 0
	u32 Local_U32_Counter = 0;
	while(Local_U32_Counter < ADC_POLLING_TIME)
	{
		Local_U32_Counter++;
		if(GET_BIT(ADCSRA_REG,ADIF_BIT) == ADC_FINISH_CONVERTING)
    1634:	e6 e2       	ldi	r30, 0x26	; 38
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	84 fd       	sbrc	r24, 4
    163c:	0c c0       	rjmp	.+24     	; 0x1656 <M_ADC_Void_ADCRead+0x36>
{
	ADMUX_REG = (ADMUX_REG & ADMUX_MASK) | Copy_U8_ADCChannel;
	u32 Local_U32_Counter = 0;
	while(Local_U32_Counter < ADC_POLLING_TIME)
	{
		Local_U32_Counter++;
    163e:	2f 5f       	subi	r18, 0xFF	; 255
    1640:	3f 4f       	sbci	r19, 0xFF	; 255
    1642:	4f 4f       	sbci	r20, 0xFF	; 255
    1644:	5f 4f       	sbci	r21, 0xFF	; 255
/*--------------------------------------------------------------------------------------------*/
u16  M_ADC_Void_ADCRead(u8 Copy_U8_ADCChannel)
{
	ADMUX_REG = (ADMUX_REG & ADMUX_MASK) | Copy_U8_ADCChannel;
	u32 Local_U32_Counter = 0;
	while(Local_U32_Counter < ADC_POLLING_TIME)
    1646:	20 38       	cpi	r18, 0x80	; 128
    1648:	84 e8       	ldi	r24, 0x84	; 132
    164a:	38 07       	cpc	r19, r24
    164c:	8e e1       	ldi	r24, 0x1E	; 30
    164e:	48 07       	cpc	r20, r24
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	58 07       	cpc	r21, r24
    1654:	89 f7       	brne	.-30     	; 0x1638 <M_ADC_Void_ADCRead+0x18>
		if(GET_BIT(ADCSRA_REG,ADIF_BIT) == ADC_FINISH_CONVERTING)
		{
			break;
		}
	}
	return ADCVALUE_REG;
    1656:	24 b1       	in	r18, 0x04	; 4
    1658:	35 b1       	in	r19, 0x05	; 5
}
    165a:	82 2f       	mov	r24, r18
    165c:	93 2f       	mov	r25, r19
    165e:	08 95       	ret

00001660 <H_WIFI_U8_WIFIRead>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
u8   H_WIFI_U8_WIFIRead(void)
{
	return M_UART_U8_UARTRead();
    1660:	0e 94 ce 06 	call	0xd9c	; 0xd9c <M_UART_U8_UARTRead>
}
    1664:	08 95       	ret

00001666 <H_WIFI_Void_WIFIWrite>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_WIFI_Void_WIFIWrite(u8 Copy_U8_Data)
{
	M_UART_Void_UARTWrite(Copy_U8_Data);
    1666:	0e 94 b7 06 	call	0xd6e	; 0xd6e <M_UART_Void_UARTWrite>
}
    166a:	08 95       	ret

0000166c <H_WIFI_Void_WIFIInit>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_WIFI_Void_WIFIInit(void)
{
	M_UART_Void_UARTInit();
    166c:	0e 94 d5 06 	call	0xdaa	; 0xdaa <M_UART_Void_UARTInit>
}
    1670:	08 95       	ret

00001672 <H_SSD_Void_SSDDisplay>:

/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
void H_SSD_Void_SSDDisplay(u32 Copy_U32_Num)
{
    1672:	2f 92       	push	r2
    1674:	3f 92       	push	r3
    1676:	4f 92       	push	r4
    1678:	5f 92       	push	r5
    167a:	6f 92       	push	r6
    167c:	7f 92       	push	r7
    167e:	8f 92       	push	r8
    1680:	9f 92       	push	r9
    1682:	af 92       	push	r10
    1684:	bf 92       	push	r11
    1686:	cf 92       	push	r12
    1688:	df 92       	push	r13
    168a:	ef 92       	push	r14
    168c:	ff 92       	push	r15
    168e:	0f 93       	push	r16
    1690:	1f 93       	push	r17
    1692:	df 93       	push	r29
    1694:	cf 93       	push	r28
    1696:	00 d0       	rcall	.+0      	; 0x1698 <H_SSD_Void_SSDDisplay+0x26>
    1698:	00 d0       	rcall	.+0      	; 0x169a <H_SSD_Void_SSDDisplay+0x28>
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
    169e:	7b 01       	movw	r14, r22
    16a0:	8c 01       	movw	r16, r24
	u8 Local_U8_1    =  Copy_U32_Num % 10;
    16a2:	2a e0       	ldi	r18, 0x0A	; 10
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	40 e0       	ldi	r20, 0x00	; 0
    16a8:	50 e0       	ldi	r21, 0x00	; 0
    16aa:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <__udivmodsi4>
    16ae:	b6 2e       	mov	r11, r22
	u8 Local_U8_10   = (Copy_U32_Num / 10) % 10;
    16b0:	c8 01       	movw	r24, r16
    16b2:	b7 01       	movw	r22, r14
    16b4:	2a e0       	ldi	r18, 0x0A	; 10
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	40 e0       	ldi	r20, 0x00	; 0
    16ba:	50 e0       	ldi	r21, 0x00	; 0
    16bc:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <__udivmodsi4>
    16c0:	ca 01       	movw	r24, r20
    16c2:	b9 01       	movw	r22, r18
    16c4:	2a e0       	ldi	r18, 0x0A	; 10
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	40 e0       	ldi	r20, 0x00	; 0
    16ca:	50 e0       	ldi	r21, 0x00	; 0
    16cc:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <__udivmodsi4>
    16d0:	c6 2e       	mov	r12, r22
	u8 Local_U8_100  = (Copy_U32_Num / 100) % 10;
    16d2:	c8 01       	movw	r24, r16
    16d4:	b7 01       	movw	r22, r14
    16d6:	24 e6       	ldi	r18, 0x64	; 100
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	40 e0       	ldi	r20, 0x00	; 0
    16dc:	50 e0       	ldi	r21, 0x00	; 0
    16de:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <__udivmodsi4>
    16e2:	ca 01       	movw	r24, r20
    16e4:	b9 01       	movw	r22, r18
    16e6:	2a e0       	ldi	r18, 0x0A	; 10
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	40 e0       	ldi	r20, 0x00	; 0
    16ec:	50 e0       	ldi	r21, 0x00	; 0
    16ee:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <__udivmodsi4>
    16f2:	d6 2e       	mov	r13, r22
	u8 Local_U8_1000 =  Copy_U32_Num / 1000;
    16f4:	c8 01       	movw	r24, r16
    16f6:	b7 01       	movw	r22, r14
    16f8:	28 ee       	ldi	r18, 0xE8	; 232
    16fa:	33 e0       	ldi	r19, 0x03	; 3
    16fc:	40 e0       	ldi	r20, 0x00	; 0
    16fe:	50 e0       	ldi	r21, 0x00	; 0
    1700:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <__udivmodsi4>
	u32 Local_U16_Counter = 0;
	for(Local_U16_Counter = 0 ; Local_U16_Counter < SSD_DISPLAY_TIME ; Local_U16_Counter++)
	{
		M_DIO_Void_SetPinValue(SSD_A_PIN,GET_BIT(Local_U8_1,0));
		M_DIO_Void_SetPinValue(SSD_B_PIN,GET_BIT(Local_U8_1,1));
    1704:	8b 2d       	mov	r24, r11
    1706:	86 95       	lsr	r24
    1708:	81 70       	andi	r24, 0x01	; 1
    170a:	8a 83       	std	Y+2, r24	; 0x02
		M_DIO_Void_SetPinValue(SSD_C_PIN,GET_BIT(Local_U8_1,2));
    170c:	8b 2d       	mov	r24, r11
    170e:	86 95       	lsr	r24
    1710:	86 95       	lsr	r24
    1712:	81 70       	andi	r24, 0x01	; 1
    1714:	89 83       	std	Y+1, r24	; 0x01
		M_DIO_Void_SetPinValue(SSD_D_PIN,GET_BIT(Local_U8_1,3));
    1716:	8b 2d       	mov	r24, r11
    1718:	86 95       	lsr	r24
    171a:	86 95       	lsr	r24
    171c:	86 95       	lsr	r24
    171e:	22 24       	eor	r2, r2
    1720:	23 94       	inc	r2
    1722:	28 22       	and	r2, r24
		M_DIO_Void_SetPinValue(SSD1_EN_PIN,LOW);
		_delay_ms(1);
		M_DIO_Void_SetPinValue(SSD1_EN_PIN,HIGH);

		M_DIO_Void_SetPinValue(SSD_A_PIN,GET_BIT(Local_U8_10,0));
		M_DIO_Void_SetPinValue(SSD_B_PIN,GET_BIT(Local_U8_10,1));
    1724:	8c 2d       	mov	r24, r12
    1726:	86 95       	lsr	r24
    1728:	33 24       	eor	r3, r3
    172a:	33 94       	inc	r3
    172c:	38 22       	and	r3, r24
		M_DIO_Void_SetPinValue(SSD_C_PIN,GET_BIT(Local_U8_10,2));
    172e:	8c 2d       	mov	r24, r12
    1730:	86 95       	lsr	r24
    1732:	86 95       	lsr	r24
    1734:	44 24       	eor	r4, r4
    1736:	43 94       	inc	r4
    1738:	48 22       	and	r4, r24
		M_DIO_Void_SetPinValue(SSD_D_PIN,GET_BIT(Local_U8_10,3));
    173a:	8c 2d       	mov	r24, r12
    173c:	86 95       	lsr	r24
    173e:	86 95       	lsr	r24
    1740:	86 95       	lsr	r24
    1742:	55 24       	eor	r5, r5
    1744:	53 94       	inc	r5
    1746:	58 22       	and	r5, r24
		M_DIO_Void_SetPinValue(SSD2_EN_PIN,LOW);
		_delay_ms(1);
		M_DIO_Void_SetPinValue(SSD2_EN_PIN,HIGH);

		M_DIO_Void_SetPinValue(SSD_A_PIN,GET_BIT(Local_U8_100,0));
		M_DIO_Void_SetPinValue(SSD_B_PIN,GET_BIT(Local_U8_100,1));
    1748:	8d 2d       	mov	r24, r13
    174a:	86 95       	lsr	r24
    174c:	66 24       	eor	r6, r6
    174e:	63 94       	inc	r6
    1750:	68 22       	and	r6, r24
		M_DIO_Void_SetPinValue(SSD_C_PIN,GET_BIT(Local_U8_100,2));
    1752:	8d 2d       	mov	r24, r13
    1754:	86 95       	lsr	r24
    1756:	86 95       	lsr	r24
    1758:	77 24       	eor	r7, r7
    175a:	73 94       	inc	r7
    175c:	78 22       	and	r7, r24
		M_DIO_Void_SetPinValue(SSD_D_PIN,GET_BIT(Local_U8_100,3));
    175e:	8d 2d       	mov	r24, r13
    1760:	86 95       	lsr	r24
    1762:	86 95       	lsr	r24
    1764:	86 95       	lsr	r24
    1766:	88 24       	eor	r8, r8
    1768:	83 94       	inc	r8
    176a:	88 22       	and	r8, r24
		_delay_ms(1);
		M_DIO_Void_SetPinValue(SSD3_EN_PIN,HIGH);


		M_DIO_Void_SetPinValue(SSD_A_PIN,GET_BIT(Local_U8_1000,0));
		M_DIO_Void_SetPinValue(SSD_B_PIN,GET_BIT(Local_U8_1000,1));
    176c:	82 2f       	mov	r24, r18
    176e:	86 95       	lsr	r24
    1770:	99 24       	eor	r9, r9
    1772:	93 94       	inc	r9
    1774:	98 22       	and	r9, r24
		M_DIO_Void_SetPinValue(SSD_C_PIN,GET_BIT(Local_U8_1000,2));
    1776:	82 2f       	mov	r24, r18
    1778:	86 95       	lsr	r24
    177a:	86 95       	lsr	r24
    177c:	aa 24       	eor	r10, r10
    177e:	a3 94       	inc	r10
    1780:	a8 22       	and	r10, r24
		M_DIO_Void_SetPinValue(SSD_D_PIN,GET_BIT(Local_U8_1000,3));
    1782:	82 2f       	mov	r24, r18
    1784:	86 95       	lsr	r24
    1786:	86 95       	lsr	r24
    1788:	86 95       	lsr	r24
    178a:	ff 24       	eor	r15, r15
    178c:	f3 94       	inc	r15
    178e:	f8 22       	and	r15, r24
    1790:	1c 82       	std	Y+4, r1	; 0x04
    1792:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_U8_100  = (Copy_U32_Num / 100) % 10;
	u8 Local_U8_1000 =  Copy_U32_Num / 1000;
	u32 Local_U16_Counter = 0;
	for(Local_U16_Counter = 0 ; Local_U16_Counter < SSD_DISPLAY_TIME ; Local_U16_Counter++)
	{
		M_DIO_Void_SetPinValue(SSD_A_PIN,GET_BIT(Local_U8_1,0));
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	b8 22       	and	r11, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1798:	00 ea       	ldi	r16, 0xA0	; 160
    179a:	1f e0       	ldi	r17, 0x0F	; 15
		M_DIO_Void_SetPinValue(SSD_D_PIN,GET_BIT(Local_U8_1,3));
		M_DIO_Void_SetPinValue(SSD1_EN_PIN,LOW);
		_delay_ms(1);
		M_DIO_Void_SetPinValue(SSD1_EN_PIN,HIGH);

		M_DIO_Void_SetPinValue(SSD_A_PIN,GET_BIT(Local_U8_10,0));
    179c:	c8 22       	and	r12, r24
		M_DIO_Void_SetPinValue(SSD_D_PIN,GET_BIT(Local_U8_10,3));
		M_DIO_Void_SetPinValue(SSD2_EN_PIN,LOW);
		_delay_ms(1);
		M_DIO_Void_SetPinValue(SSD2_EN_PIN,HIGH);

		M_DIO_Void_SetPinValue(SSD_A_PIN,GET_BIT(Local_U8_100,0));
    179e:	d8 22       	and	r13, r24
		M_DIO_Void_SetPinValue(SSD3_EN_PIN,LOW);
		_delay_ms(1);
		M_DIO_Void_SetPinValue(SSD3_EN_PIN,HIGH);


		M_DIO_Void_SetPinValue(SSD_A_PIN,GET_BIT(Local_U8_1000,0));
    17a0:	ee 24       	eor	r14, r14
    17a2:	e3 94       	inc	r14
    17a4:	e2 22       	and	r14, r18
	u8 Local_U8_100  = (Copy_U32_Num / 100) % 10;
	u8 Local_U8_1000 =  Copy_U32_Num / 1000;
	u32 Local_U16_Counter = 0;
	for(Local_U16_Counter = 0 ; Local_U16_Counter < SSD_DISPLAY_TIME ; Local_U16_Counter++)
	{
		M_DIO_Void_SetPinValue(SSD_A_PIN,GET_BIT(Local_U8_1,0));
    17a6:	84 e1       	ldi	r24, 0x14	; 20
    17a8:	6b 2d       	mov	r22, r11
    17aa:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN,GET_BIT(Local_U8_1,1));
    17ae:	85 e1       	ldi	r24, 0x15	; 21
    17b0:	6a 81       	ldd	r22, Y+2	; 0x02
    17b2:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN,GET_BIT(Local_U8_1,2));
    17b6:	86 e1       	ldi	r24, 0x16	; 22
    17b8:	69 81       	ldd	r22, Y+1	; 0x01
    17ba:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN,GET_BIT(Local_U8_1,3));
    17be:	88 e1       	ldi	r24, 0x18	; 24
    17c0:	62 2d       	mov	r22, r2
    17c2:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD1_EN_PIN,LOW);
    17c6:	8d e0       	ldi	r24, 0x0D	; 13
    17c8:	60 e0       	ldi	r22, 0x00	; 0
    17ca:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
    17ce:	c8 01       	movw	r24, r16
    17d0:	01 97       	sbiw	r24, 0x01	; 1
    17d2:	f1 f7       	brne	.-4      	; 0x17d0 <H_SSD_Void_SSDDisplay+0x15e>
		_delay_ms(1);
		M_DIO_Void_SetPinValue(SSD1_EN_PIN,HIGH);
    17d4:	8d e0       	ldi	r24, 0x0D	; 13
    17d6:	61 e0       	ldi	r22, 0x01	; 1
    17d8:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>

		M_DIO_Void_SetPinValue(SSD_A_PIN,GET_BIT(Local_U8_10,0));
    17dc:	84 e1       	ldi	r24, 0x14	; 20
    17de:	6c 2d       	mov	r22, r12
    17e0:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN,GET_BIT(Local_U8_10,1));
    17e4:	85 e1       	ldi	r24, 0x15	; 21
    17e6:	63 2d       	mov	r22, r3
    17e8:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN,GET_BIT(Local_U8_10,2));
    17ec:	86 e1       	ldi	r24, 0x16	; 22
    17ee:	64 2d       	mov	r22, r4
    17f0:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN,GET_BIT(Local_U8_10,3));
    17f4:	88 e1       	ldi	r24, 0x18	; 24
    17f6:	65 2d       	mov	r22, r5
    17f8:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD2_EN_PIN,LOW);
    17fc:	8c e0       	ldi	r24, 0x0C	; 12
    17fe:	60 e0       	ldi	r22, 0x00	; 0
    1800:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
    1804:	c8 01       	movw	r24, r16
    1806:	01 97       	sbiw	r24, 0x01	; 1
    1808:	f1 f7       	brne	.-4      	; 0x1806 <H_SSD_Void_SSDDisplay+0x194>
		_delay_ms(1);
		M_DIO_Void_SetPinValue(SSD2_EN_PIN,HIGH);
    180a:	8c e0       	ldi	r24, 0x0C	; 12
    180c:	61 e0       	ldi	r22, 0x01	; 1
    180e:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>

		M_DIO_Void_SetPinValue(SSD_A_PIN,GET_BIT(Local_U8_100,0));
    1812:	84 e1       	ldi	r24, 0x14	; 20
    1814:	6d 2d       	mov	r22, r13
    1816:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN,GET_BIT(Local_U8_100,1));
    181a:	85 e1       	ldi	r24, 0x15	; 21
    181c:	66 2d       	mov	r22, r6
    181e:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN,GET_BIT(Local_U8_100,2));
    1822:	86 e1       	ldi	r24, 0x16	; 22
    1824:	67 2d       	mov	r22, r7
    1826:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN,GET_BIT(Local_U8_100,3));
    182a:	88 e1       	ldi	r24, 0x18	; 24
    182c:	68 2d       	mov	r22, r8
    182e:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD3_EN_PIN,LOW);
    1832:	89 e1       	ldi	r24, 0x19	; 25
    1834:	60 e0       	ldi	r22, 0x00	; 0
    1836:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
    183a:	c8 01       	movw	r24, r16
    183c:	01 97       	sbiw	r24, 0x01	; 1
    183e:	f1 f7       	brne	.-4      	; 0x183c <H_SSD_Void_SSDDisplay+0x1ca>
		_delay_ms(1);
		M_DIO_Void_SetPinValue(SSD3_EN_PIN,HIGH);
    1840:	89 e1       	ldi	r24, 0x19	; 25
    1842:	61 e0       	ldi	r22, 0x01	; 1
    1844:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>


		M_DIO_Void_SetPinValue(SSD_A_PIN,GET_BIT(Local_U8_1000,0));
    1848:	84 e1       	ldi	r24, 0x14	; 20
    184a:	6e 2d       	mov	r22, r14
    184c:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN,GET_BIT(Local_U8_1000,1));
    1850:	85 e1       	ldi	r24, 0x15	; 21
    1852:	69 2d       	mov	r22, r9
    1854:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN,GET_BIT(Local_U8_1000,2));
    1858:	86 e1       	ldi	r24, 0x16	; 22
    185a:	6a 2d       	mov	r22, r10
    185c:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN,GET_BIT(Local_U8_1000,3));
    1860:	88 e1       	ldi	r24, 0x18	; 24
    1862:	6f 2d       	mov	r22, r15
    1864:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD4_EN_PIN,LOW);
    1868:	8a e1       	ldi	r24, 0x1A	; 26
    186a:	60 e0       	ldi	r22, 0x00	; 0
    186c:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
    1870:	c8 01       	movw	r24, r16
    1872:	01 97       	sbiw	r24, 0x01	; 1
    1874:	f1 f7       	brne	.-4      	; 0x1872 <H_SSD_Void_SSDDisplay+0x200>
		_delay_ms(1);
		M_DIO_Void_SetPinValue(SSD4_EN_PIN,HIGH);
    1876:	8a e1       	ldi	r24, 0x1A	; 26
    1878:	61 e0       	ldi	r22, 0x01	; 1
    187a:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
    187e:	eb 81       	ldd	r30, Y+3	; 0x03
    1880:	fc 81       	ldd	r31, Y+4	; 0x04
    1882:	31 96       	adiw	r30, 0x01	; 1
    1884:	fc 83       	std	Y+4, r31	; 0x04
    1886:	eb 83       	std	Y+3, r30	; 0x03
	u8 Local_U8_1    =  Copy_U32_Num % 10;
	u8 Local_U8_10   = (Copy_U32_Num / 10) % 10;
	u8 Local_U8_100  = (Copy_U32_Num / 100) % 10;
	u8 Local_U8_1000 =  Copy_U32_Num / 1000;
	u32 Local_U16_Counter = 0;
	for(Local_U16_Counter = 0 ; Local_U16_Counter < SSD_DISPLAY_TIME ; Local_U16_Counter++)
    1888:	e8 3c       	cpi	r30, 0xC8	; 200
    188a:	f1 05       	cpc	r31, r1
    188c:	09 f0       	breq	.+2      	; 0x1890 <H_SSD_Void_SSDDisplay+0x21e>
    188e:	8b cf       	rjmp	.-234    	; 0x17a6 <H_SSD_Void_SSDDisplay+0x134>
		M_DIO_Void_SetPinValue(SSD_D_PIN,GET_BIT(Local_U8_1000,3));
		M_DIO_Void_SetPinValue(SSD4_EN_PIN,LOW);
		_delay_ms(1);
		M_DIO_Void_SetPinValue(SSD4_EN_PIN,HIGH);
	}
}
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	1f 91       	pop	r17
    189e:	0f 91       	pop	r16
    18a0:	ff 90       	pop	r15
    18a2:	ef 90       	pop	r14
    18a4:	df 90       	pop	r13
    18a6:	cf 90       	pop	r12
    18a8:	bf 90       	pop	r11
    18aa:	af 90       	pop	r10
    18ac:	9f 90       	pop	r9
    18ae:	8f 90       	pop	r8
    18b0:	7f 90       	pop	r7
    18b2:	6f 90       	pop	r6
    18b4:	5f 90       	pop	r5
    18b6:	4f 90       	pop	r4
    18b8:	3f 90       	pop	r3
    18ba:	2f 90       	pop	r2
    18bc:	08 95       	ret

000018be <H_SSD_Void_SSDInit>:
/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
void H_SSD_Void_SSDInit(void)
{
	M_DIO_Void_SetPinDirection(SSD_A_PIN,OUTPUT);
    18be:	84 e1       	ldi	r24, 0x14	; 20
    18c0:	61 e0       	ldi	r22, 0x01	; 1
    18c2:	0e 94 b0 08 	call	0x1160	; 0x1160 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD_B_PIN,OUTPUT);
    18c6:	85 e1       	ldi	r24, 0x15	; 21
    18c8:	61 e0       	ldi	r22, 0x01	; 1
    18ca:	0e 94 b0 08 	call	0x1160	; 0x1160 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD_C_PIN,OUTPUT);
    18ce:	86 e1       	ldi	r24, 0x16	; 22
    18d0:	61 e0       	ldi	r22, 0x01	; 1
    18d2:	0e 94 b0 08 	call	0x1160	; 0x1160 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD_D_PIN,OUTPUT);
    18d6:	88 e1       	ldi	r24, 0x18	; 24
    18d8:	61 e0       	ldi	r22, 0x01	; 1
    18da:	0e 94 b0 08 	call	0x1160	; 0x1160 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD1_EN_PIN,OUTPUT);
    18de:	8d e0       	ldi	r24, 0x0D	; 13
    18e0:	61 e0       	ldi	r22, 0x01	; 1
    18e2:	0e 94 b0 08 	call	0x1160	; 0x1160 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD2_EN_PIN,OUTPUT);
    18e6:	8c e0       	ldi	r24, 0x0C	; 12
    18e8:	61 e0       	ldi	r22, 0x01	; 1
    18ea:	0e 94 b0 08 	call	0x1160	; 0x1160 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD3_EN_PIN,OUTPUT);
    18ee:	89 e1       	ldi	r24, 0x19	; 25
    18f0:	61 e0       	ldi	r22, 0x01	; 1
    18f2:	0e 94 b0 08 	call	0x1160	; 0x1160 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD4_EN_PIN,OUTPUT);
    18f6:	8a e1       	ldi	r24, 0x1A	; 26
    18f8:	61 e0       	ldi	r22, 0x01	; 1
    18fa:	0e 94 b0 08 	call	0x1160	; 0x1160 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinValue(SSD1_EN_PIN,HIGH);
    18fe:	8d e0       	ldi	r24, 0x0D	; 13
    1900:	61 e0       	ldi	r22, 0x01	; 1
    1902:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(SSD2_EN_PIN,HIGH);
    1906:	8c e0       	ldi	r24, 0x0C	; 12
    1908:	61 e0       	ldi	r22, 0x01	; 1
    190a:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(SSD3_EN_PIN,HIGH);
    190e:	89 e1       	ldi	r24, 0x19	; 25
    1910:	61 e0       	ldi	r22, 0x01	; 1
    1912:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(SSD4_EN_PIN,HIGH);
    1916:	8a e1       	ldi	r24, 0x1A	; 26
    1918:	61 e0       	ldi	r22, 0x01	; 1
    191a:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>

}
    191e:	08 95       	ret

00001920 <H_PushButton_U8_PushButtonRead>:
}

u8   H_PushButton_U8_PushButtonRead(u8 Copy_U8_PushButton)
{
	u8 Local_U8_Reading = PUSH_BUTTON_RELEASED;
	switch(Copy_U8_PushButton)
    1920:	81 30       	cpi	r24, 0x01	; 1
    1922:	29 f1       	breq	.+74     	; 0x196e <H_PushButton_U8_PushButtonRead+0x4e>
    1924:	81 30       	cpi	r24, 0x01	; 1
    1926:	38 f0       	brcs	.+14     	; 0x1936 <H_PushButton_U8_PushButtonRead+0x16>
    1928:	82 30       	cpi	r24, 0x02	; 2
    192a:	09 f4       	brne	.+2      	; 0x192e <H_PushButton_U8_PushButtonRead+0xe>
    192c:	3c c0       	rjmp	.+120    	; 0x19a6 <H_PushButton_U8_PushButtonRead+0x86>
    192e:	83 30       	cpi	r24, 0x03	; 3
    1930:	09 f0       	breq	.+2      	; 0x1934 <H_PushButton_U8_PushButtonRead+0x14>
    1932:	6d c0       	rjmp	.+218    	; 0x1a0e <H_PushButton_U8_PushButtonRead+0xee>
    1934:	52 c0       	rjmp	.+164    	; 0x19da <H_PushButton_U8_PushButtonRead+0xba>
	{
	case PUSH_BUTTON_0:
		if(M_DIO_Void_GetPinValue(PUSH_BUTTON_0_PIN) == PUSH_BUTTON_PRESSED)
    1936:	8f e2       	ldi	r24, 0x2F	; 47
    1938:	0e 94 da 09 	call	0x13b4	; 0x13b4 <M_DIO_Void_GetPinValue>
    193c:	88 23       	and	r24, r24
    193e:	09 f0       	breq	.+2      	; 0x1942 <H_PushButton_U8_PushButtonRead+0x22>
    1940:	66 c0       	rjmp	.+204    	; 0x1a0e <H_PushButton_U8_PushButtonRead+0xee>
    1942:	24 ef       	ldi	r18, 0xF4	; 244
    1944:	31 e0       	ldi	r19, 0x01	; 1
    1946:	40 e9       	ldi	r20, 0x90	; 144
    1948:	51 e0       	ldi	r21, 0x01	; 1
    194a:	ca 01       	movw	r24, r20
    194c:	01 97       	sbiw	r24, 0x01	; 1
    194e:	f1 f7       	brne	.-4      	; 0x194c <H_PushButton_U8_PushButtonRead+0x2c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1950:	21 50       	subi	r18, 0x01	; 1
    1952:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1954:	d1 f7       	brne	.-12     	; 0x194a <H_PushButton_U8_PushButtonRead+0x2a>
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_Void_GetPinValue(PUSH_BUTTON_0_PIN) == PUSH_BUTTON_PRESSED)
    1956:	8f e2       	ldi	r24, 0x2F	; 47
    1958:	0e 94 da 09 	call	0x13b4	; 0x13b4 <M_DIO_Void_GetPinValue>
    195c:	88 23       	and	r24, r24
    195e:	09 f0       	breq	.+2      	; 0x1962 <H_PushButton_U8_PushButtonRead+0x42>
    1960:	56 c0       	rjmp	.+172    	; 0x1a0e <H_PushButton_U8_PushButtonRead+0xee>
			{
				while(M_DIO_Void_GetPinValue(PUSH_BUTTON_0_PIN) == PUSH_BUTTON_PRESSED);
    1962:	8f e2       	ldi	r24, 0x2F	; 47
    1964:	0e 94 da 09 	call	0x13b4	; 0x13b4 <M_DIO_Void_GetPinValue>
    1968:	88 23       	and	r24, r24
    196a:	d9 f3       	breq	.-10     	; 0x1962 <H_PushButton_U8_PushButtonRead+0x42>
    196c:	52 c0       	rjmp	.+164    	; 0x1a12 <H_PushButton_U8_PushButtonRead+0xf2>
				Local_U8_Reading = PUSH_BUTTON_PRESSED;
			}
		}
		break;
	case PUSH_BUTTON_1:
		if(M_DIO_Void_GetPinValue(PUSH_BUTTON_1_PIN) == PUSH_BUTTON_PRESSED)
    196e:	8e e2       	ldi	r24, 0x2E	; 46
    1970:	0e 94 da 09 	call	0x13b4	; 0x13b4 <M_DIO_Void_GetPinValue>
    1974:	88 23       	and	r24, r24
    1976:	09 f0       	breq	.+2      	; 0x197a <H_PushButton_U8_PushButtonRead+0x5a>
    1978:	4a c0       	rjmp	.+148    	; 0x1a0e <H_PushButton_U8_PushButtonRead+0xee>
    197a:	24 ef       	ldi	r18, 0xF4	; 244
    197c:	31 e0       	ldi	r19, 0x01	; 1
    197e:	40 e9       	ldi	r20, 0x90	; 144
    1980:	51 e0       	ldi	r21, 0x01	; 1
    1982:	ca 01       	movw	r24, r20
    1984:	01 97       	sbiw	r24, 0x01	; 1
    1986:	f1 f7       	brne	.-4      	; 0x1984 <H_PushButton_U8_PushButtonRead+0x64>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1988:	21 50       	subi	r18, 0x01	; 1
    198a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    198c:	d1 f7       	brne	.-12     	; 0x1982 <H_PushButton_U8_PushButtonRead+0x62>
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_Void_GetPinValue(PUSH_BUTTON_1_PIN) == PUSH_BUTTON_PRESSED)
    198e:	8e e2       	ldi	r24, 0x2E	; 46
    1990:	0e 94 da 09 	call	0x13b4	; 0x13b4 <M_DIO_Void_GetPinValue>
    1994:	88 23       	and	r24, r24
    1996:	09 f0       	breq	.+2      	; 0x199a <H_PushButton_U8_PushButtonRead+0x7a>
    1998:	3a c0       	rjmp	.+116    	; 0x1a0e <H_PushButton_U8_PushButtonRead+0xee>
			{
				while(M_DIO_Void_GetPinValue(PUSH_BUTTON_1_PIN) == PUSH_BUTTON_PRESSED);
    199a:	8e e2       	ldi	r24, 0x2E	; 46
    199c:	0e 94 da 09 	call	0x13b4	; 0x13b4 <M_DIO_Void_GetPinValue>
    19a0:	88 23       	and	r24, r24
    19a2:	d9 f3       	breq	.-10     	; 0x199a <H_PushButton_U8_PushButtonRead+0x7a>
    19a4:	36 c0       	rjmp	.+108    	; 0x1a12 <H_PushButton_U8_PushButtonRead+0xf2>
				Local_U8_Reading = PUSH_BUTTON_PRESSED;
			}
		}
		break;
	case PUSH_BUTTON_2:
		if(M_DIO_Void_GetPinValue(PUSH_BUTTON_2_PIN) == PUSH_BUTTON_PRESSED)
    19a6:	8d e2       	ldi	r24, 0x2D	; 45
    19a8:	0e 94 da 09 	call	0x13b4	; 0x13b4 <M_DIO_Void_GetPinValue>
    19ac:	88 23       	and	r24, r24
    19ae:	79 f5       	brne	.+94     	; 0x1a0e <H_PushButton_U8_PushButtonRead+0xee>
    19b0:	24 ef       	ldi	r18, 0xF4	; 244
    19b2:	31 e0       	ldi	r19, 0x01	; 1
    19b4:	40 e9       	ldi	r20, 0x90	; 144
    19b6:	51 e0       	ldi	r21, 0x01	; 1
    19b8:	ca 01       	movw	r24, r20
    19ba:	01 97       	sbiw	r24, 0x01	; 1
    19bc:	f1 f7       	brne	.-4      	; 0x19ba <H_PushButton_U8_PushButtonRead+0x9a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19be:	21 50       	subi	r18, 0x01	; 1
    19c0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c2:	d1 f7       	brne	.-12     	; 0x19b8 <H_PushButton_U8_PushButtonRead+0x98>
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_Void_GetPinValue(PUSH_BUTTON_2_PIN) == PUSH_BUTTON_PRESSED)
    19c4:	8d e2       	ldi	r24, 0x2D	; 45
    19c6:	0e 94 da 09 	call	0x13b4	; 0x13b4 <M_DIO_Void_GetPinValue>
    19ca:	88 23       	and	r24, r24
    19cc:	01 f5       	brne	.+64     	; 0x1a0e <H_PushButton_U8_PushButtonRead+0xee>
			{
				while(M_DIO_Void_GetPinValue(PUSH_BUTTON_2_PIN) == PUSH_BUTTON_PRESSED);
    19ce:	8d e2       	ldi	r24, 0x2D	; 45
    19d0:	0e 94 da 09 	call	0x13b4	; 0x13b4 <M_DIO_Void_GetPinValue>
    19d4:	88 23       	and	r24, r24
    19d6:	d9 f3       	breq	.-10     	; 0x19ce <H_PushButton_U8_PushButtonRead+0xae>
    19d8:	1c c0       	rjmp	.+56     	; 0x1a12 <H_PushButton_U8_PushButtonRead+0xf2>
				Local_U8_Reading = PUSH_BUTTON_PRESSED;
			}
		}
		break;
	case PUSH_BUTTON_3:
		if(M_DIO_Void_GetPinValue(PUSH_BUTTON_3_PIN) == PUSH_BUTTON_PRESSED)
    19da:	8b e2       	ldi	r24, 0x2B	; 43
    19dc:	0e 94 da 09 	call	0x13b4	; 0x13b4 <M_DIO_Void_GetPinValue>
    19e0:	88 23       	and	r24, r24
    19e2:	a9 f4       	brne	.+42     	; 0x1a0e <H_PushButton_U8_PushButtonRead+0xee>
    19e4:	24 ef       	ldi	r18, 0xF4	; 244
    19e6:	31 e0       	ldi	r19, 0x01	; 1
    19e8:	40 e9       	ldi	r20, 0x90	; 144
    19ea:	51 e0       	ldi	r21, 0x01	; 1
    19ec:	ca 01       	movw	r24, r20
    19ee:	01 97       	sbiw	r24, 0x01	; 1
    19f0:	f1 f7       	brne	.-4      	; 0x19ee <H_PushButton_U8_PushButtonRead+0xce>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f2:	21 50       	subi	r18, 0x01	; 1
    19f4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f6:	d1 f7       	brne	.-12     	; 0x19ec <H_PushButton_U8_PushButtonRead+0xcc>
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_Void_GetPinValue(PUSH_BUTTON_3_PIN) == PUSH_BUTTON_PRESSED)
    19f8:	8b e2       	ldi	r24, 0x2B	; 43
    19fa:	0e 94 da 09 	call	0x13b4	; 0x13b4 <M_DIO_Void_GetPinValue>
    19fe:	88 23       	and	r24, r24
    1a00:	31 f4       	brne	.+12     	; 0x1a0e <H_PushButton_U8_PushButtonRead+0xee>
			{
				while(M_DIO_Void_GetPinValue(PUSH_BUTTON_3_PIN) == PUSH_BUTTON_PRESSED);
    1a02:	8b e2       	ldi	r24, 0x2B	; 43
    1a04:	0e 94 da 09 	call	0x13b4	; 0x13b4 <M_DIO_Void_GetPinValue>
    1a08:	88 23       	and	r24, r24
    1a0a:	d9 f3       	breq	.-10     	; 0x1a02 <H_PushButton_U8_PushButtonRead+0xe2>
    1a0c:	02 c0       	rjmp	.+4      	; 0x1a12 <H_PushButton_U8_PushButtonRead+0xf2>
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	08 95       	ret
    1a12:	80 e0       	ldi	r24, 0x00	; 0
		}
		break;
	default:                                                         break;
	}
	return Local_U8_Reading;
}
    1a14:	08 95       	ret

00001a16 <H_PushButton_Void_PushButtonInit>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_PushButton_Void_PushButtonInit(u8 Copy_U8_PushButton)
{
	switch(Copy_U8_PushButton)
    1a16:	81 30       	cpi	r24, 0x01	; 1
    1a18:	61 f0       	breq	.+24     	; 0x1a32 <H_PushButton_Void_PushButtonInit+0x1c>
    1a1a:	81 30       	cpi	r24, 0x01	; 1
    1a1c:	28 f0       	brcs	.+10     	; 0x1a28 <H_PushButton_Void_PushButtonInit+0x12>
    1a1e:	82 30       	cpi	r24, 0x02	; 2
    1a20:	69 f0       	breq	.+26     	; 0x1a3c <H_PushButton_Void_PushButtonInit+0x26>
    1a22:	83 30       	cpi	r24, 0x03	; 3
    1a24:	a1 f4       	brne	.+40     	; 0x1a4e <H_PushButton_Void_PushButtonInit+0x38>
    1a26:	0f c0       	rjmp	.+30     	; 0x1a46 <H_PushButton_Void_PushButtonInit+0x30>
	{
	case PUSH_BUTTON_0: M_DIO_Void_SetPinDirection(PUSH_BUTTON_0_PIN,INPUT); break;
    1a28:	8f e2       	ldi	r24, 0x2F	; 47
    1a2a:	60 e0       	ldi	r22, 0x00	; 0
    1a2c:	0e 94 b0 08 	call	0x1160	; 0x1160 <M_DIO_Void_SetPinDirection>
    1a30:	08 95       	ret
	case PUSH_BUTTON_1: M_DIO_Void_SetPinDirection(PUSH_BUTTON_1_PIN,INPUT); break;
    1a32:	8e e2       	ldi	r24, 0x2E	; 46
    1a34:	60 e0       	ldi	r22, 0x00	; 0
    1a36:	0e 94 b0 08 	call	0x1160	; 0x1160 <M_DIO_Void_SetPinDirection>
    1a3a:	08 95       	ret
	case PUSH_BUTTON_2: M_DIO_Void_SetPinDirection(PUSH_BUTTON_2_PIN,INPUT); break;
    1a3c:	8d e2       	ldi	r24, 0x2D	; 45
    1a3e:	60 e0       	ldi	r22, 0x00	; 0
    1a40:	0e 94 b0 08 	call	0x1160	; 0x1160 <M_DIO_Void_SetPinDirection>
    1a44:	08 95       	ret
	case PUSH_BUTTON_3: M_DIO_Void_SetPinDirection(PUSH_BUTTON_3_PIN,INPUT); break;
    1a46:	8b e2       	ldi	r24, 0x2B	; 43
    1a48:	60 e0       	ldi	r22, 0x00	; 0
    1a4a:	0e 94 b0 08 	call	0x1160	; 0x1160 <M_DIO_Void_SetPinDirection>
    1a4e:	08 95       	ret

00001a50 <H_LED_Void_LedTog>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedTog(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
    1a50:	82 30       	cpi	r24, 0x02	; 2
    1a52:	71 f0       	breq	.+28     	; 0x1a70 <H_LED_Void_LedTog+0x20>
    1a54:	83 30       	cpi	r24, 0x03	; 3
    1a56:	18 f4       	brcc	.+6      	; 0x1a5e <H_LED_Void_LedTog+0xe>
    1a58:	81 30       	cpi	r24, 0x01	; 1
    1a5a:	a9 f4       	brne	.+42     	; 0x1a86 <H_LED_Void_LedTog+0x36>
    1a5c:	05 c0       	rjmp	.+10     	; 0x1a68 <H_LED_Void_LedTog+0x18>
    1a5e:	83 30       	cpi	r24, 0x03	; 3
    1a60:	59 f0       	breq	.+22     	; 0x1a78 <H_LED_Void_LedTog+0x28>
    1a62:	84 30       	cpi	r24, 0x04	; 4
    1a64:	81 f4       	brne	.+32     	; 0x1a86 <H_LED_Void_LedTog+0x36>
    1a66:	0c c0       	rjmp	.+24     	; 0x1a80 <H_LED_Void_LedTog+0x30>
	{
	case LED_YEL: M_DIO_Void_TogPin(LED_YEL_PIN); break;
    1a68:	80 e1       	ldi	r24, 0x10	; 16
    1a6a:	0e 94 13 0a 	call	0x1426	; 0x1426 <M_DIO_Void_TogPin>
    1a6e:	08 95       	ret
	case LED_BLU: M_DIO_Void_TogPin(LED_BLU_PIN); break;
    1a70:	8f e0       	ldi	r24, 0x0F	; 15
    1a72:	0e 94 13 0a 	call	0x1426	; 0x1426 <M_DIO_Void_TogPin>
    1a76:	08 95       	ret
	case LED_GRN: M_DIO_Void_TogPin(LED_GRN_PIN); break;
    1a78:	8e e0       	ldi	r24, 0x0E	; 14
    1a7a:	0e 94 13 0a 	call	0x1426	; 0x1426 <M_DIO_Void_TogPin>
    1a7e:	08 95       	ret
	case LED_RED: M_DIO_Void_TogPin(LED_RED_PIN); break;
    1a80:	8b e1       	ldi	r24, 0x1B	; 27
    1a82:	0e 94 13 0a 	call	0x1426	; 0x1426 <M_DIO_Void_TogPin>
    1a86:	08 95       	ret

00001a88 <H_LED_Void_LedBlink>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedBlink(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
    1a88:	82 30       	cpi	r24, 0x02	; 2
    1a8a:	f9 f0       	breq	.+62     	; 0x1aca <H_LED_Void_LedBlink+0x42>
    1a8c:	83 30       	cpi	r24, 0x03	; 3
    1a8e:	20 f4       	brcc	.+8      	; 0x1a98 <H_LED_Void_LedBlink+0x10>
    1a90:	81 30       	cpi	r24, 0x01	; 1
    1a92:	09 f0       	breq	.+2      	; 0x1a96 <H_LED_Void_LedBlink+0xe>
    1a94:	52 c0       	rjmp	.+164    	; 0x1b3a <H_LED_Void_LedBlink+0xb2>
    1a96:	06 c0       	rjmp	.+12     	; 0x1aa4 <H_LED_Void_LedBlink+0x1c>
    1a98:	83 30       	cpi	r24, 0x03	; 3
    1a9a:	51 f1       	breq	.+84     	; 0x1af0 <H_LED_Void_LedBlink+0x68>
    1a9c:	84 30       	cpi	r24, 0x04	; 4
    1a9e:	09 f0       	breq	.+2      	; 0x1aa2 <H_LED_Void_LedBlink+0x1a>
    1aa0:	4c c0       	rjmp	.+152    	; 0x1b3a <H_LED_Void_LedBlink+0xb2>
    1aa2:	39 c0       	rjmp	.+114    	; 0x1b16 <H_LED_Void_LedBlink+0x8e>
	{
	case LED_YEL:
		M_DIO_Void_SetPinValue(LED_YEL_PIN,HIGH);
    1aa4:	80 e1       	ldi	r24, 0x10	; 16
    1aa6:	61 e0       	ldi	r22, 0x01	; 1
    1aa8:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
    1aac:	28 eb       	ldi	r18, 0xB8	; 184
    1aae:	3b e0       	ldi	r19, 0x0B	; 11
    1ab0:	40 e9       	ldi	r20, 0x90	; 144
    1ab2:	51 e0       	ldi	r21, 0x01	; 1
    1ab4:	ca 01       	movw	r24, r20
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
    1ab8:	f1 f7       	brne	.-4      	; 0x1ab6 <H_LED_Void_LedBlink+0x2e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aba:	21 50       	subi	r18, 0x01	; 1
    1abc:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1abe:	d1 f7       	brne	.-12     	; 0x1ab4 <H_LED_Void_LedBlink+0x2c>
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_YEL_PIN,LOW);
    1ac0:	80 e1       	ldi	r24, 0x10	; 16
    1ac2:	60 e0       	ldi	r22, 0x00	; 0
    1ac4:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
    1ac8:	08 95       	ret
		break;
	case LED_BLU:
		M_DIO_Void_SetPinValue(LED_BLU_PIN,HIGH);
    1aca:	8f e0       	ldi	r24, 0x0F	; 15
    1acc:	61 e0       	ldi	r22, 0x01	; 1
    1ace:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
    1ad2:	28 eb       	ldi	r18, 0xB8	; 184
    1ad4:	3b e0       	ldi	r19, 0x0B	; 11
    1ad6:	40 e9       	ldi	r20, 0x90	; 144
    1ad8:	51 e0       	ldi	r21, 0x01	; 1
    1ada:	ca 01       	movw	r24, r20
    1adc:	01 97       	sbiw	r24, 0x01	; 1
    1ade:	f1 f7       	brne	.-4      	; 0x1adc <H_LED_Void_LedBlink+0x54>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae0:	21 50       	subi	r18, 0x01	; 1
    1ae2:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae4:	d1 f7       	brne	.-12     	; 0x1ada <H_LED_Void_LedBlink+0x52>
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_BLU_PIN,LOW);
    1ae6:	8f e0       	ldi	r24, 0x0F	; 15
    1ae8:	60 e0       	ldi	r22, 0x00	; 0
    1aea:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
    1aee:	08 95       	ret
		break;
	case LED_GRN:
		M_DIO_Void_SetPinValue(LED_GRN_PIN,HIGH);
    1af0:	8e e0       	ldi	r24, 0x0E	; 14
    1af2:	61 e0       	ldi	r22, 0x01	; 1
    1af4:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
    1af8:	28 eb       	ldi	r18, 0xB8	; 184
    1afa:	3b e0       	ldi	r19, 0x0B	; 11
    1afc:	40 e9       	ldi	r20, 0x90	; 144
    1afe:	51 e0       	ldi	r21, 0x01	; 1
    1b00:	ca 01       	movw	r24, r20
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	f1 f7       	brne	.-4      	; 0x1b02 <H_LED_Void_LedBlink+0x7a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b06:	21 50       	subi	r18, 0x01	; 1
    1b08:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b0a:	d1 f7       	brne	.-12     	; 0x1b00 <H_LED_Void_LedBlink+0x78>
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_GRN_PIN,LOW);
    1b0c:	8e e0       	ldi	r24, 0x0E	; 14
    1b0e:	60 e0       	ldi	r22, 0x00	; 0
    1b10:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
    1b14:	08 95       	ret
		break;
	case LED_RED:
		M_DIO_Void_SetPinValue(LED_RED_PIN,HIGH);
    1b16:	8b e1       	ldi	r24, 0x1B	; 27
    1b18:	61 e0       	ldi	r22, 0x01	; 1
    1b1a:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
    1b1e:	28 eb       	ldi	r18, 0xB8	; 184
    1b20:	3b e0       	ldi	r19, 0x0B	; 11
    1b22:	40 e9       	ldi	r20, 0x90	; 144
    1b24:	51 e0       	ldi	r21, 0x01	; 1
    1b26:	ca 01       	movw	r24, r20
    1b28:	01 97       	sbiw	r24, 0x01	; 1
    1b2a:	f1 f7       	brne	.-4      	; 0x1b28 <H_LED_Void_LedBlink+0xa0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b2c:	21 50       	subi	r18, 0x01	; 1
    1b2e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b30:	d1 f7       	brne	.-12     	; 0x1b26 <H_LED_Void_LedBlink+0x9e>
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_RED_PIN,LOW);
    1b32:	8b e1       	ldi	r24, 0x1B	; 27
    1b34:	60 e0       	ldi	r22, 0x00	; 0
    1b36:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
    1b3a:	08 95       	ret

00001b3c <H_LED_Void_LedOff>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedOff(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
    1b3c:	82 30       	cpi	r24, 0x02	; 2
    1b3e:	79 f0       	breq	.+30     	; 0x1b5e <H_LED_Void_LedOff+0x22>
    1b40:	83 30       	cpi	r24, 0x03	; 3
    1b42:	18 f4       	brcc	.+6      	; 0x1b4a <H_LED_Void_LedOff+0xe>
    1b44:	81 30       	cpi	r24, 0x01	; 1
    1b46:	c9 f4       	brne	.+50     	; 0x1b7a <H_LED_Void_LedOff+0x3e>
    1b48:	05 c0       	rjmp	.+10     	; 0x1b54 <H_LED_Void_LedOff+0x18>
    1b4a:	83 30       	cpi	r24, 0x03	; 3
    1b4c:	69 f0       	breq	.+26     	; 0x1b68 <H_LED_Void_LedOff+0x2c>
    1b4e:	84 30       	cpi	r24, 0x04	; 4
    1b50:	a1 f4       	brne	.+40     	; 0x1b7a <H_LED_Void_LedOff+0x3e>
    1b52:	0f c0       	rjmp	.+30     	; 0x1b72 <H_LED_Void_LedOff+0x36>
	{
	case LED_YEL: M_DIO_Void_SetPinValue(LED_YEL_PIN,LOW); break;
    1b54:	80 e1       	ldi	r24, 0x10	; 16
    1b56:	60 e0       	ldi	r22, 0x00	; 0
    1b58:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
    1b5c:	08 95       	ret
	case LED_BLU: M_DIO_Void_SetPinValue(LED_BLU_PIN,LOW); break;
    1b5e:	8f e0       	ldi	r24, 0x0F	; 15
    1b60:	60 e0       	ldi	r22, 0x00	; 0
    1b62:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
    1b66:	08 95       	ret
	case LED_GRN: M_DIO_Void_SetPinValue(LED_GRN_PIN,LOW); break;
    1b68:	8e e0       	ldi	r24, 0x0E	; 14
    1b6a:	60 e0       	ldi	r22, 0x00	; 0
    1b6c:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
    1b70:	08 95       	ret
	case LED_RED: M_DIO_Void_SetPinValue(LED_RED_PIN,LOW); break;
    1b72:	8b e1       	ldi	r24, 0x1B	; 27
    1b74:	60 e0       	ldi	r22, 0x00	; 0
    1b76:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
    1b7a:	08 95       	ret

00001b7c <H_LED_Void_LedOn>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedOn(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
    1b7c:	82 30       	cpi	r24, 0x02	; 2
    1b7e:	79 f0       	breq	.+30     	; 0x1b9e <H_LED_Void_LedOn+0x22>
    1b80:	83 30       	cpi	r24, 0x03	; 3
    1b82:	18 f4       	brcc	.+6      	; 0x1b8a <H_LED_Void_LedOn+0xe>
    1b84:	81 30       	cpi	r24, 0x01	; 1
    1b86:	c9 f4       	brne	.+50     	; 0x1bba <H_LED_Void_LedOn+0x3e>
    1b88:	05 c0       	rjmp	.+10     	; 0x1b94 <H_LED_Void_LedOn+0x18>
    1b8a:	83 30       	cpi	r24, 0x03	; 3
    1b8c:	69 f0       	breq	.+26     	; 0x1ba8 <H_LED_Void_LedOn+0x2c>
    1b8e:	84 30       	cpi	r24, 0x04	; 4
    1b90:	a1 f4       	brne	.+40     	; 0x1bba <H_LED_Void_LedOn+0x3e>
    1b92:	0f c0       	rjmp	.+30     	; 0x1bb2 <H_LED_Void_LedOn+0x36>
	{
	case LED_YEL: M_DIO_Void_SetPinValue(LED_YEL_PIN,HIGH); break;
    1b94:	80 e1       	ldi	r24, 0x10	; 16
    1b96:	61 e0       	ldi	r22, 0x01	; 1
    1b98:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
    1b9c:	08 95       	ret
	case LED_BLU: M_DIO_Void_SetPinValue(LED_BLU_PIN,HIGH); break;
    1b9e:	8f e0       	ldi	r24, 0x0F	; 15
    1ba0:	61 e0       	ldi	r22, 0x01	; 1
    1ba2:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
    1ba6:	08 95       	ret
	case LED_GRN: M_DIO_Void_SetPinValue(LED_GRN_PIN,HIGH); break;
    1ba8:	8e e0       	ldi	r24, 0x0E	; 14
    1baa:	61 e0       	ldi	r22, 0x01	; 1
    1bac:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
    1bb0:	08 95       	ret
	case LED_RED: M_DIO_Void_SetPinValue(LED_RED_PIN,HIGH); break;
    1bb2:	8b e1       	ldi	r24, 0x1B	; 27
    1bb4:	61 e0       	ldi	r22, 0x01	; 1
    1bb6:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
    1bba:	08 95       	ret

00001bbc <H_LED_Void_LedInit>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedInit(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
    1bbc:	82 30       	cpi	r24, 0x02	; 2
    1bbe:	79 f0       	breq	.+30     	; 0x1bde <H_LED_Void_LedInit+0x22>
    1bc0:	83 30       	cpi	r24, 0x03	; 3
    1bc2:	18 f4       	brcc	.+6      	; 0x1bca <H_LED_Void_LedInit+0xe>
    1bc4:	81 30       	cpi	r24, 0x01	; 1
    1bc6:	c9 f4       	brne	.+50     	; 0x1bfa <H_LED_Void_LedInit+0x3e>
    1bc8:	05 c0       	rjmp	.+10     	; 0x1bd4 <H_LED_Void_LedInit+0x18>
    1bca:	83 30       	cpi	r24, 0x03	; 3
    1bcc:	69 f0       	breq	.+26     	; 0x1be8 <H_LED_Void_LedInit+0x2c>
    1bce:	84 30       	cpi	r24, 0x04	; 4
    1bd0:	a1 f4       	brne	.+40     	; 0x1bfa <H_LED_Void_LedInit+0x3e>
    1bd2:	0f c0       	rjmp	.+30     	; 0x1bf2 <H_LED_Void_LedInit+0x36>
	{
	case LED_YEL: M_DIO_Void_SetPinDirection(LED_YEL_PIN,OUTPUT); break;
    1bd4:	80 e1       	ldi	r24, 0x10	; 16
    1bd6:	61 e0       	ldi	r22, 0x01	; 1
    1bd8:	0e 94 b0 08 	call	0x1160	; 0x1160 <M_DIO_Void_SetPinDirection>
    1bdc:	08 95       	ret
	case LED_BLU: M_DIO_Void_SetPinDirection(LED_BLU_PIN,OUTPUT); break;
    1bde:	8f e0       	ldi	r24, 0x0F	; 15
    1be0:	61 e0       	ldi	r22, 0x01	; 1
    1be2:	0e 94 b0 08 	call	0x1160	; 0x1160 <M_DIO_Void_SetPinDirection>
    1be6:	08 95       	ret
	case LED_GRN: M_DIO_Void_SetPinDirection(LED_GRN_PIN,OUTPUT); break;
    1be8:	8e e0       	ldi	r24, 0x0E	; 14
    1bea:	61 e0       	ldi	r22, 0x01	; 1
    1bec:	0e 94 b0 08 	call	0x1160	; 0x1160 <M_DIO_Void_SetPinDirection>
    1bf0:	08 95       	ret
	case LED_RED: M_DIO_Void_SetPinDirection(LED_RED_PIN,OUTPUT); break;
    1bf2:	8b e1       	ldi	r24, 0x1B	; 27
    1bf4:	61 e0       	ldi	r22, 0x01	; 1
    1bf6:	0e 94 b0 08 	call	0x1160	; 0x1160 <M_DIO_Void_SetPinDirection>
    1bfa:	08 95       	ret

00001bfc <H_Lcd_Void_LCDWriteCommand>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteCommand(u8 Copy_U8_Command)
{
    1bfc:	ef 92       	push	r14
    1bfe:	ff 92       	push	r15
    1c00:	1f 93       	push	r17
    1c02:	18 2f       	mov	r17, r24
	M_DIO_Void_SetPinValue(LCD_RS_PIN,LOW);
    1c04:	8d e0       	ldi	r24, 0x0D	; 13
    1c06:	60 e0       	ldi	r22, 0x00	; 0
    1c08:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,4));
    1c0c:	61 2f       	mov	r22, r17
    1c0e:	62 95       	swap	r22
    1c10:	6f 70       	andi	r22, 0x0F	; 15
    1c12:	61 70       	andi	r22, 0x01	; 1
    1c14:	84 e1       	ldi	r24, 0x14	; 20
    1c16:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,5));
    1c1a:	61 2f       	mov	r22, r17
    1c1c:	62 95       	swap	r22
    1c1e:	66 95       	lsr	r22
    1c20:	67 70       	andi	r22, 0x07	; 7
    1c22:	61 70       	andi	r22, 0x01	; 1
    1c24:	85 e1       	ldi	r24, 0x15	; 21
    1c26:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,6));
    1c2a:	61 2f       	mov	r22, r17
    1c2c:	62 95       	swap	r22
    1c2e:	66 95       	lsr	r22
    1c30:	66 95       	lsr	r22
    1c32:	63 70       	andi	r22, 0x03	; 3
    1c34:	61 70       	andi	r22, 0x01	; 1
    1c36:	86 e1       	ldi	r24, 0x16	; 22
    1c38:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,7));
    1c3c:	61 2f       	mov	r22, r17
    1c3e:	66 1f       	adc	r22, r22
    1c40:	66 27       	eor	r22, r22
    1c42:	66 1f       	adc	r22, r22
    1c44:	88 e1       	ldi	r24, 0x18	; 24
    1c46:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    1c4a:	8c e0       	ldi	r24, 0x0C	; 12
    1c4c:	61 e0       	ldi	r22, 0x01	; 1
    1c4e:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
    1c52:	0f 2e       	mov	r0, r31
    1c54:	f0 ea       	ldi	r31, 0xA0	; 160
    1c56:	ef 2e       	mov	r14, r31
    1c58:	ff e0       	ldi	r31, 0x0F	; 15
    1c5a:	ff 2e       	mov	r15, r31
    1c5c:	f0 2d       	mov	r31, r0
    1c5e:	c7 01       	movw	r24, r14
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	f1 f7       	brne	.-4      	; 0x1c60 <H_Lcd_Void_LCDWriteCommand+0x64>
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    1c64:	8c e0       	ldi	r24, 0x0C	; 12
    1c66:	60 e0       	ldi	r22, 0x00	; 0
    1c68:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
    1c6c:	c7 01       	movw	r24, r14
    1c6e:	01 97       	sbiw	r24, 0x01	; 1
    1c70:	f1 f7       	brne	.-4      	; 0x1c6e <H_Lcd_Void_LCDWriteCommand+0x72>
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,0));
    1c72:	61 2f       	mov	r22, r17
    1c74:	61 70       	andi	r22, 0x01	; 1
    1c76:	84 e1       	ldi	r24, 0x14	; 20
    1c78:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,1));
    1c7c:	61 2f       	mov	r22, r17
    1c7e:	66 95       	lsr	r22
    1c80:	61 70       	andi	r22, 0x01	; 1
    1c82:	85 e1       	ldi	r24, 0x15	; 21
    1c84:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,2));
    1c88:	61 2f       	mov	r22, r17
    1c8a:	66 95       	lsr	r22
    1c8c:	66 95       	lsr	r22
    1c8e:	61 70       	andi	r22, 0x01	; 1
    1c90:	86 e1       	ldi	r24, 0x16	; 22
    1c92:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,3));
    1c96:	16 95       	lsr	r17
    1c98:	16 95       	lsr	r17
    1c9a:	16 95       	lsr	r17
    1c9c:	11 70       	andi	r17, 0x01	; 1
    1c9e:	88 e1       	ldi	r24, 0x18	; 24
    1ca0:	61 2f       	mov	r22, r17
    1ca2:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    1ca6:	8c e0       	ldi	r24, 0x0C	; 12
    1ca8:	61 e0       	ldi	r22, 0x01	; 1
    1caa:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
    1cae:	c7 01       	movw	r24, r14
    1cb0:	01 97       	sbiw	r24, 0x01	; 1
    1cb2:	f1 f7       	brne	.-4      	; 0x1cb0 <H_Lcd_Void_LCDWriteCommand+0xb4>
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    1cb4:	8c e0       	ldi	r24, 0x0C	; 12
    1cb6:	60 e0       	ldi	r22, 0x00	; 0
    1cb8:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
    1cbc:	80 e2       	ldi	r24, 0x20	; 32
    1cbe:	9e e4       	ldi	r25, 0x4E	; 78
    1cc0:	01 97       	sbiw	r24, 0x01	; 1
    1cc2:	f1 f7       	brne	.-4      	; 0x1cc0 <H_Lcd_Void_LCDWriteCommand+0xc4>
	_delay_ms(5);
#endif
}
    1cc4:	1f 91       	pop	r17
    1cc6:	ff 90       	pop	r15
    1cc8:	ef 90       	pop	r14
    1cca:	08 95       	ret

00001ccc <H_Lcd_Void_LCDGoTo>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDGoTo(u8 Copy_U8_Row,u8 Copy_U8_Col)
{
    1ccc:	df 93       	push	r29
    1cce:	cf 93       	push	r28
    1cd0:	00 d0       	rcall	.+0      	; 0x1cd2 <H_Lcd_Void_LCDGoTo+0x6>
    1cd2:	00 d0       	rcall	.+0      	; 0x1cd4 <H_Lcd_Void_LCDGoTo+0x8>
    1cd4:	cd b7       	in	r28, 0x3d	; 61
    1cd6:	de b7       	in	r29, 0x3e	; 62
	u8 Local_U8_Arr [4] = {LCD_R0_COMMAND , LCD_R1_COMMAND , LCD_R2_COMMAND , LCD_R3_COMMAND};
    1cd8:	90 e8       	ldi	r25, 0x80	; 128
    1cda:	99 83       	std	Y+1, r25	; 0x01
    1cdc:	90 ec       	ldi	r25, 0xC0	; 192
    1cde:	9a 83       	std	Y+2, r25	; 0x02
    1ce0:	94 e9       	ldi	r25, 0x94	; 148
    1ce2:	9b 83       	std	Y+3, r25	; 0x03
    1ce4:	94 ed       	ldi	r25, 0xD4	; 212
    1ce6:	9c 83       	std	Y+4, r25	; 0x04
	H_Lcd_Void_LCDWriteCommand(Local_U8_Arr[Copy_U8_Row] + Copy_U8_Col);
    1ce8:	fe 01       	movw	r30, r28
    1cea:	e8 0f       	add	r30, r24
    1cec:	f1 1d       	adc	r31, r1
    1cee:	81 81       	ldd	r24, Z+1	; 0x01
    1cf0:	86 0f       	add	r24, r22
    1cf2:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <H_Lcd_Void_LCDWriteCommand>
}
    1cf6:	0f 90       	pop	r0
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
    1cfc:	0f 90       	pop	r0
    1cfe:	cf 91       	pop	r28
    1d00:	df 91       	pop	r29
    1d02:	08 95       	ret

00001d04 <H_Lcd_Void_LCDClear>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDClear()
{
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <H_Lcd_Void_LCDWriteCommand>
}
    1d0a:	08 95       	ret

00001d0c <H_Lcd_Void_LCDWriteCharacter>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteCharacter(u8 Copy_U8_Character)
{
    1d0c:	ef 92       	push	r14
    1d0e:	ff 92       	push	r15
    1d10:	1f 93       	push	r17
    1d12:	18 2f       	mov	r17, r24
	M_DIO_Void_SetPinValue(LCD_RS_PIN,HIGH);
    1d14:	8d e0       	ldi	r24, 0x0D	; 13
    1d16:	61 e0       	ldi	r22, 0x01	; 1
    1d18:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,4));
    1d1c:	61 2f       	mov	r22, r17
    1d1e:	62 95       	swap	r22
    1d20:	6f 70       	andi	r22, 0x0F	; 15
    1d22:	61 70       	andi	r22, 0x01	; 1
    1d24:	84 e1       	ldi	r24, 0x14	; 20
    1d26:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,5));
    1d2a:	61 2f       	mov	r22, r17
    1d2c:	62 95       	swap	r22
    1d2e:	66 95       	lsr	r22
    1d30:	67 70       	andi	r22, 0x07	; 7
    1d32:	61 70       	andi	r22, 0x01	; 1
    1d34:	85 e1       	ldi	r24, 0x15	; 21
    1d36:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,6));
    1d3a:	61 2f       	mov	r22, r17
    1d3c:	62 95       	swap	r22
    1d3e:	66 95       	lsr	r22
    1d40:	66 95       	lsr	r22
    1d42:	63 70       	andi	r22, 0x03	; 3
    1d44:	61 70       	andi	r22, 0x01	; 1
    1d46:	86 e1       	ldi	r24, 0x16	; 22
    1d48:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,7));
    1d4c:	61 2f       	mov	r22, r17
    1d4e:	66 1f       	adc	r22, r22
    1d50:	66 27       	eor	r22, r22
    1d52:	66 1f       	adc	r22, r22
    1d54:	88 e1       	ldi	r24, 0x18	; 24
    1d56:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    1d5a:	8c e0       	ldi	r24, 0x0C	; 12
    1d5c:	61 e0       	ldi	r22, 0x01	; 1
    1d5e:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
    1d62:	0f 2e       	mov	r0, r31
    1d64:	f0 ea       	ldi	r31, 0xA0	; 160
    1d66:	ef 2e       	mov	r14, r31
    1d68:	ff e0       	ldi	r31, 0x0F	; 15
    1d6a:	ff 2e       	mov	r15, r31
    1d6c:	f0 2d       	mov	r31, r0
    1d6e:	c7 01       	movw	r24, r14
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	f1 f7       	brne	.-4      	; 0x1d70 <H_Lcd_Void_LCDWriteCharacter+0x64>
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    1d74:	8c e0       	ldi	r24, 0x0C	; 12
    1d76:	60 e0       	ldi	r22, 0x00	; 0
    1d78:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
    1d7c:	c7 01       	movw	r24, r14
    1d7e:	01 97       	sbiw	r24, 0x01	; 1
    1d80:	f1 f7       	brne	.-4      	; 0x1d7e <H_Lcd_Void_LCDWriteCharacter+0x72>
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,0));
    1d82:	61 2f       	mov	r22, r17
    1d84:	61 70       	andi	r22, 0x01	; 1
    1d86:	84 e1       	ldi	r24, 0x14	; 20
    1d88:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,1));
    1d8c:	61 2f       	mov	r22, r17
    1d8e:	66 95       	lsr	r22
    1d90:	61 70       	andi	r22, 0x01	; 1
    1d92:	85 e1       	ldi	r24, 0x15	; 21
    1d94:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,2));
    1d98:	61 2f       	mov	r22, r17
    1d9a:	66 95       	lsr	r22
    1d9c:	66 95       	lsr	r22
    1d9e:	61 70       	andi	r22, 0x01	; 1
    1da0:	86 e1       	ldi	r24, 0x16	; 22
    1da2:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,3));
    1da6:	16 95       	lsr	r17
    1da8:	16 95       	lsr	r17
    1daa:	16 95       	lsr	r17
    1dac:	11 70       	andi	r17, 0x01	; 1
    1dae:	88 e1       	ldi	r24, 0x18	; 24
    1db0:	61 2f       	mov	r22, r17
    1db2:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    1db6:	8c e0       	ldi	r24, 0x0C	; 12
    1db8:	61 e0       	ldi	r22, 0x01	; 1
    1dba:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
    1dbe:	c7 01       	movw	r24, r14
    1dc0:	01 97       	sbiw	r24, 0x01	; 1
    1dc2:	f1 f7       	brne	.-4      	; 0x1dc0 <H_Lcd_Void_LCDWriteCharacter+0xb4>
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    1dc4:	8c e0       	ldi	r24, 0x0C	; 12
    1dc6:	60 e0       	ldi	r22, 0x00	; 0
    1dc8:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
    1dcc:	80 e2       	ldi	r24, 0x20	; 32
    1dce:	9e e4       	ldi	r25, 0x4E	; 78
    1dd0:	01 97       	sbiw	r24, 0x01	; 1
    1dd2:	f1 f7       	brne	.-4      	; 0x1dd0 <H_Lcd_Void_LCDWriteCharacter+0xc4>
	_delay_ms(5);
#endif
}
    1dd4:	1f 91       	pop	r17
    1dd6:	ff 90       	pop	r15
    1dd8:	ef 90       	pop	r14
    1dda:	08 95       	ret

00001ddc <H_Lcd_Void_LCDWriteNumber>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteNumber(s32 Copy_S32_Number)
{
    1ddc:	af 92       	push	r10
    1dde:	bf 92       	push	r11
    1de0:	cf 92       	push	r12
    1de2:	df 92       	push	r13
    1de4:	ef 92       	push	r14
    1de6:	ff 92       	push	r15
    1de8:	0f 93       	push	r16
    1dea:	df 93       	push	r29
    1dec:	cf 93       	push	r28
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
    1df2:	2c 97       	sbiw	r28, 0x0c	; 12
    1df4:	0f b6       	in	r0, 0x3f	; 63
    1df6:	f8 94       	cli
    1df8:	de bf       	out	0x3e, r29	; 62
    1dfa:	0f be       	out	0x3f, r0	; 63
    1dfc:	cd bf       	out	0x3d, r28	; 61
    1dfe:	6b 01       	movw	r12, r22
    1e00:	7c 01       	movw	r14, r24
	s8 Local_S8_Counter = 0;
	u8 Local_U8_Arr[10] = {0};
	if(Copy_S32_Number < 0)
    1e02:	99 23       	and	r25, r25
    1e04:	5c f4       	brge	.+22     	; 0x1e1c <H_Lcd_Void_LCDWriteNumber+0x40>
	{
		Copy_S32_Number = Copy_S32_Number * -1;
    1e06:	f0 94       	com	r15
    1e08:	e0 94       	com	r14
    1e0a:	d0 94       	com	r13
    1e0c:	c0 94       	com	r12
    1e0e:	c1 1c       	adc	r12, r1
    1e10:	d1 1c       	adc	r13, r1
    1e12:	e1 1c       	adc	r14, r1
    1e14:	f1 1c       	adc	r15, r1
		H_Lcd_Void_LCDWriteCharacter('-');
    1e16:	8d e2       	ldi	r24, 0x2D	; 45
    1e18:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <H_Lcd_Void_LCDWriteCharacter>
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteNumber(s32 Copy_S32_Number)
{
	s8 Local_S8_Counter = 0;
	u8 Local_U8_Arr[10] = {0};
    1e1c:	fe 01       	movw	r30, r28
    1e1e:	31 96       	adiw	r30, 0x01	; 1
    1e20:	8a e0       	ldi	r24, 0x0A	; 10
    1e22:	df 01       	movw	r26, r30
    1e24:	1d 92       	st	X+, r1
    1e26:	8a 95       	dec	r24
    1e28:	e9 f7       	brne	.-6      	; 0x1e24 <H_Lcd_Void_LCDWriteNumber+0x48>
    1e2a:	00 e0       	ldi	r16, 0x00	; 0
		H_Lcd_Void_LCDWriteCharacter('-');
	}

	do
	{
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
    1e2c:	5f 01       	movw	r10, r30
    1e2e:	80 2f       	mov	r24, r16
    1e30:	99 27       	eor	r25, r25
    1e32:	87 fd       	sbrc	r24, 7
    1e34:	90 95       	com	r25
    1e36:	f5 01       	movw	r30, r10
    1e38:	e8 0f       	add	r30, r24
    1e3a:	f9 1f       	adc	r31, r25
    1e3c:	fc 87       	std	Y+12, r31	; 0x0c
    1e3e:	eb 87       	std	Y+11, r30	; 0x0b
    1e40:	c7 01       	movw	r24, r14
    1e42:	b6 01       	movw	r22, r12
    1e44:	2a e0       	ldi	r18, 0x0A	; 10
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	40 e0       	ldi	r20, 0x00	; 0
    1e4a:	50 e0       	ldi	r21, 0x00	; 0
    1e4c:	0e 94 8c 11 	call	0x2318	; 0x2318 <__divmodsi4>
    1e50:	ab 85       	ldd	r26, Y+11	; 0x0b
    1e52:	bc 85       	ldd	r27, Y+12	; 0x0c
    1e54:	6c 93       	st	X, r22
		Copy_S32_Number                = Copy_S32_Number / 10;
    1e56:	c7 01       	movw	r24, r14
    1e58:	b6 01       	movw	r22, r12
    1e5a:	2a e0       	ldi	r18, 0x0A	; 10
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	40 e0       	ldi	r20, 0x00	; 0
    1e60:	50 e0       	ldi	r21, 0x00	; 0
    1e62:	0e 94 8c 11 	call	0x2318	; 0x2318 <__divmodsi4>
    1e66:	82 2f       	mov	r24, r18
    1e68:	93 2f       	mov	r25, r19
    1e6a:	a4 2f       	mov	r26, r20
    1e6c:	b5 2f       	mov	r27, r21
    1e6e:	6c 01       	movw	r12, r24
    1e70:	7d 01       	movw	r14, r26
		Local_S8_Counter++;
    1e72:	0f 5f       	subi	r16, 0xFF	; 255
	}while(Copy_S32_Number != 0);
    1e74:	c1 14       	cp	r12, r1
    1e76:	d1 04       	cpc	r13, r1
    1e78:	e1 04       	cpc	r14, r1
    1e7a:	f1 04       	cpc	r15, r1
    1e7c:	c1 f6       	brne	.-80     	; 0x1e2e <H_Lcd_Void_LCDWriteNumber+0x52>

	while(Local_S8_Counter > 0)
    1e7e:	10 16       	cp	r1, r16
    1e80:	94 f4       	brge	.+36     	; 0x1ea6 <H_Lcd_Void_LCDWriteNumber+0xca>
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
    1e82:	7e 01       	movw	r14, r28
    1e84:	08 94       	sec
    1e86:	e1 1c       	adc	r14, r1
    1e88:	f1 1c       	adc	r15, r1
    1e8a:	01 50       	subi	r16, 0x01	; 1
    1e8c:	80 2f       	mov	r24, r16
    1e8e:	99 27       	eor	r25, r25
    1e90:	87 fd       	sbrc	r24, 7
    1e92:	90 95       	com	r25
    1e94:	f7 01       	movw	r30, r14
    1e96:	e8 0f       	add	r30, r24
    1e98:	f9 1f       	adc	r31, r25
    1e9a:	80 81       	ld	r24, Z
    1e9c:	80 5d       	subi	r24, 0xD0	; 208
    1e9e:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
		Copy_S32_Number                = Copy_S32_Number / 10;
		Local_S8_Counter++;
	}while(Copy_S32_Number != 0);

	while(Local_S8_Counter > 0)
    1ea2:	10 16       	cp	r1, r16
    1ea4:	94 f3       	brlt	.-28     	; 0x1e8a <H_Lcd_Void_LCDWriteNumber+0xae>
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
	}
}
    1ea6:	2c 96       	adiw	r28, 0x0c	; 12
    1ea8:	0f b6       	in	r0, 0x3f	; 63
    1eaa:	f8 94       	cli
    1eac:	de bf       	out	0x3e, r29	; 62
    1eae:	0f be       	out	0x3f, r0	; 63
    1eb0:	cd bf       	out	0x3d, r28	; 61
    1eb2:	cf 91       	pop	r28
    1eb4:	df 91       	pop	r29
    1eb6:	0f 91       	pop	r16
    1eb8:	ff 90       	pop	r15
    1eba:	ef 90       	pop	r14
    1ebc:	df 90       	pop	r13
    1ebe:	cf 90       	pop	r12
    1ec0:	bf 90       	pop	r11
    1ec2:	af 90       	pop	r10
    1ec4:	08 95       	ret

00001ec6 <H_Lcd_Void_LCDWriteString>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
    1ec6:	1f 93       	push	r17
    1ec8:	cf 93       	push	r28
    1eca:	df 93       	push	r29
    1ecc:	ec 01       	movw	r28, r24
	u8 Local_U8_Counter = 0;
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
    1ece:	88 81       	ld	r24, Y
    1ed0:	88 23       	and	r24, r24
    1ed2:	51 f0       	breq	.+20     	; 0x1ee8 <H_Lcd_Void_LCDWriteString+0x22>
    1ed4:	10 e0       	ldi	r17, 0x00	; 0
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
    1ed6:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Counter++;
    1eda:	1f 5f       	subi	r17, 0xFF	; 255
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
	u8 Local_U8_Counter = 0;
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
    1edc:	fe 01       	movw	r30, r28
    1ede:	e1 0f       	add	r30, r17
    1ee0:	f1 1d       	adc	r31, r1
    1ee2:	80 81       	ld	r24, Z
    1ee4:	88 23       	and	r24, r24
    1ee6:	b9 f7       	brne	.-18     	; 0x1ed6 <H_Lcd_Void_LCDWriteString+0x10>
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
		Local_U8_Counter++;
	}
}
    1ee8:	df 91       	pop	r29
    1eea:	cf 91       	pop	r28
    1eec:	1f 91       	pop	r17
    1eee:	08 95       	ret

00001ef0 <H_Lcd_Void_LCDInit>:

	H_Lcd_Void_LCDWriteCommand(LCD_8_BIT_MODE_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinDirection(LCD_D4_PIN,OUTPUT);
    1ef0:	84 e1       	ldi	r24, 0x14	; 20
    1ef2:	61 e0       	ldi	r22, 0x01	; 1
    1ef4:	0e 94 b0 08 	call	0x1160	; 0x1160 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D5_PIN,OUTPUT);
    1ef8:	85 e1       	ldi	r24, 0x15	; 21
    1efa:	61 e0       	ldi	r22, 0x01	; 1
    1efc:	0e 94 b0 08 	call	0x1160	; 0x1160 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D6_PIN,OUTPUT);
    1f00:	86 e1       	ldi	r24, 0x16	; 22
    1f02:	61 e0       	ldi	r22, 0x01	; 1
    1f04:	0e 94 b0 08 	call	0x1160	; 0x1160 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D7_PIN,OUTPUT);
    1f08:	88 e1       	ldi	r24, 0x18	; 24
    1f0a:	61 e0       	ldi	r22, 0x01	; 1
    1f0c:	0e 94 b0 08 	call	0x1160	; 0x1160 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RS_PIN,OUTPUT);
    1f10:	8d e0       	ldi	r24, 0x0D	; 13
    1f12:	61 e0       	ldi	r22, 0x01	; 1
    1f14:	0e 94 b0 08 	call	0x1160	; 0x1160 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_EN_PIN,OUTPUT);
    1f18:	8c e0       	ldi	r24, 0x0C	; 12
    1f1a:	61 e0       	ldi	r22, 0x01	; 1
    1f1c:	0e 94 b0 08 	call	0x1160	; 0x1160 <M_DIO_Void_SetPinDirection>

	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_1);
    1f20:	83 e3       	ldi	r24, 0x33	; 51
    1f22:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_2);
    1f26:	82 e3       	ldi	r24, 0x32	; 50
    1f28:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_3);
    1f2c:	88 e2       	ldi	r24, 0x28	; 40
    1f2e:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
    1f32:	8c e0       	ldi	r24, 0x0C	; 12
    1f34:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
    1f38:	82 e0       	ldi	r24, 0x02	; 2
    1f3a:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <H_Lcd_Void_LCDWriteCommand>


#endif
}
    1f44:	08 95       	ret

00001f46 <H_KeyPad_U8_KeyPadRead>:

/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
u8   H_KeyPad_U8_KeyPadRead(void)
{
    1f46:	2f 92       	push	r2
    1f48:	3f 92       	push	r3
    1f4a:	4f 92       	push	r4
    1f4c:	5f 92       	push	r5
    1f4e:	6f 92       	push	r6
    1f50:	7f 92       	push	r7
    1f52:	8f 92       	push	r8
    1f54:	9f 92       	push	r9
    1f56:	af 92       	push	r10
    1f58:	bf 92       	push	r11
    1f5a:	cf 92       	push	r12
    1f5c:	df 92       	push	r13
    1f5e:	ef 92       	push	r14
    1f60:	ff 92       	push	r15
    1f62:	0f 93       	push	r16
    1f64:	1f 93       	push	r17
    1f66:	df 93       	push	r29
    1f68:	cf 93       	push	r28
    1f6a:	cd b7       	in	r28, 0x3d	; 61
    1f6c:	de b7       	in	r29, 0x3e	; 62
    1f6e:	69 97       	sbiw	r28, 0x19	; 25
    1f70:	0f b6       	in	r0, 0x3f	; 63
    1f72:	f8 94       	cli
    1f74:	de bf       	out	0x3e, r29	; 62
    1f76:	0f be       	out	0x3f, r0	; 63
    1f78:	cd bf       	out	0x3d, r28	; 61
	u8 Local_U8_KeypadRowPins[4] = { KEYPAD_R0_PIN , KEYPAD_R1_PIN , KEYPAD_R2_PIN , KEYPAD_R3_PIN };
    1f7a:	83 e2       	ldi	r24, 0x23	; 35
    1f7c:	89 83       	std	Y+1, r24	; 0x01
    1f7e:	82 e2       	ldi	r24, 0x22	; 34
    1f80:	8a 83       	std	Y+2, r24	; 0x02
    1f82:	81 e2       	ldi	r24, 0x21	; 33
    1f84:	8b 83       	std	Y+3, r24	; 0x03
    1f86:	80 e2       	ldi	r24, 0x20	; 32
    1f88:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_U8_KeypadColPins[4] = { KEYPAD_C0_PIN , KEYPAD_C1_PIN , KEYPAD_C2_PIN , KEYPAD_C3_PIN };
    1f8a:	8f e2       	ldi	r24, 0x2F	; 47
    1f8c:	8d 83       	std	Y+5, r24	; 0x05
    1f8e:	8e e2       	ldi	r24, 0x2E	; 46
    1f90:	8e 83       	std	Y+6, r24	; 0x06
    1f92:	8d e2       	ldi	r24, 0x2D	; 45
    1f94:	8f 83       	std	Y+7, r24	; 0x07
    1f96:	8b e2       	ldi	r24, 0x2B	; 43
    1f98:	88 87       	std	Y+8, r24	; 0x08
#if   KEYPAD_MODEL   ==   KEYPAD_MODEL_A
	u8 Local_U8_KeypadValue [4][4] = {{ '1' , '2' , '3' , 'A' },
			                          { '4' , '5' , '6' , 'B' },
							          { '7' , '8' , '9' , 'C' },
						         	  { '*' , '0' , '#' , 'D' }};
    1f9a:	de 01       	movw	r26, r28
    1f9c:	19 96       	adiw	r26, 0x09	; 9
    1f9e:	e8 e6       	ldi	r30, 0x68	; 104
    1fa0:	f1 e0       	ldi	r31, 0x01	; 1
    1fa2:	80 e1       	ldi	r24, 0x10	; 16
    1fa4:	01 90       	ld	r0, Z+
    1fa6:	0d 92       	st	X+, r0
    1fa8:	81 50       	subi	r24, 0x01	; 1
    1faa:	e1 f7       	brne	.-8      	; 0x1fa4 <H_KeyPad_U8_KeyPadRead+0x5e>
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	89 8f       	std	Y+25, r24	; 0x19
    1fb0:	aa 24       	eor	r10, r10
    1fb2:	bb 24       	eor	r11, r11
	for(Local_U8_RowCounter = 0 ; Local_U8_RowCounter <= 3 ; Local_U8_RowCounter++)
	{
		M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],LOW);
		for(Local_U8_ColCounter = 0 ; Local_U8_ColCounter <= 3 ; Local_U8_ColCounter++)
		{
			if(M_DIO_Void_GetPinValue(Local_U8_KeypadColPins[Local_U8_ColCounter]) == KEYPAD_PRESSED)
    1fb4:	0f 2e       	mov	r0, r31
    1fb6:	f5 e0       	ldi	r31, 0x05	; 5
    1fb8:	6f 2e       	mov	r6, r31
    1fba:	77 24       	eor	r7, r7
    1fbc:	f0 2d       	mov	r31, r0
    1fbe:	6c 0e       	add	r6, r28
    1fc0:	7d 1e       	adc	r7, r29
    1fc2:	00 e9       	ldi	r16, 0x90	; 144
    1fc4:	11 e0       	ldi	r17, 0x01	; 1
    1fc6:	c8 01       	movw	r24, r16
    1fc8:	30 2e       	mov	r3, r16
    1fca:	29 2e       	mov	r2, r25
	u8 Local_U8_KeypadColPins[4] = { KEYPAD_C0_PIN , KEYPAD_C1_PIN , KEYPAD_C2_PIN , KEYPAD_C3_PIN };
#if   KEYPAD_MODEL   ==   KEYPAD_MODEL_A
	u8 Local_U8_KeypadValue [4][4] = {{ '1' , '2' , '3' , 'A' },
			                          { '4' , '5' , '6' , 'B' },
							          { '7' , '8' , '9' , 'C' },
						         	  { '*' , '0' , '#' , 'D' }};
    1fcc:	25 01       	movw	r4, r10
	u8 Local_U8_Reading    = KEYPAD_RELEASED;
	u8 Local_U8_RowCounter = 0;
	u8 Local_U8_ColCounter = 0;
	for(Local_U8_RowCounter = 0 ; Local_U8_RowCounter <= 3 ; Local_U8_RowCounter++)
	{
		M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],LOW);
    1fce:	e1 e0       	ldi	r30, 0x01	; 1
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	ec 0f       	add	r30, r28
    1fd4:	fd 1f       	adc	r31, r29
    1fd6:	ea 0d       	add	r30, r10
    1fd8:	fb 1d       	adc	r31, r11
    1fda:	c0 80       	ld	r12, Z
    1fdc:	8c 2d       	mov	r24, r12
    1fde:	60 e0       	ldi	r22, 0x00	; 0
    1fe0:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
    1fe4:	ee 24       	eor	r14, r14
    1fe6:	ff 24       	eor	r15, r15
    1fe8:	47 01       	movw	r8, r14
		for(Local_U8_ColCounter = 0 ; Local_U8_ColCounter <= 3 ; Local_U8_ColCounter++)
		{
			if(M_DIO_Void_GetPinValue(Local_U8_KeypadColPins[Local_U8_ColCounter]) == KEYPAD_PRESSED)
    1fea:	f3 01       	movw	r30, r6
    1fec:	ee 0d       	add	r30, r14
    1fee:	ff 1d       	adc	r31, r15
    1ff0:	d0 80       	ld	r13, Z
    1ff2:	8d 2d       	mov	r24, r13
    1ff4:	0e 94 da 09 	call	0x13b4	; 0x13b4 <M_DIO_Void_GetPinValue>
    1ff8:	88 23       	and	r24, r24
    1ffa:	09 f5       	brne	.+66     	; 0x203e <H_KeyPad_U8_KeyPadRead+0xf8>
    1ffc:	83 2d       	mov	r24, r3
    1ffe:	92 2d       	mov	r25, r2
    2000:	f8 01       	movw	r30, r16
    2002:	31 97       	sbiw	r30, 0x01	; 1
    2004:	f1 f7       	brne	.-4      	; 0x2002 <H_KeyPad_U8_KeyPadRead+0xbc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2006:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2008:	d9 f7       	brne	.-10     	; 0x2000 <H_KeyPad_U8_KeyPadRead+0xba>
			{
				_delay_ms(KEYPAD_DEBOUNCING_TIME);
				if(M_DIO_Void_GetPinValue(Local_U8_KeypadColPins[Local_U8_ColCounter]) == KEYPAD_PRESSED)
    200a:	8d 2d       	mov	r24, r13
    200c:	0e 94 da 09 	call	0x13b4	; 0x13b4 <M_DIO_Void_GetPinValue>
    2010:	88 23       	and	r24, r24
    2012:	a9 f4       	brne	.+42     	; 0x203e <H_KeyPad_U8_KeyPadRead+0xf8>
				{
					while(M_DIO_Void_GetPinValue(Local_U8_KeypadColPins[Local_U8_ColCounter]) == KEYPAD_PRESSED);
    2014:	8d 2d       	mov	r24, r13
    2016:	0e 94 da 09 	call	0x13b4	; 0x13b4 <M_DIO_Void_GetPinValue>
    201a:	88 23       	and	r24, r24
    201c:	d9 f3       	breq	.-10     	; 0x2014 <H_KeyPad_U8_KeyPadRead+0xce>
					Local_U8_Reading = Local_U8_KeypadValue[Local_U8_RowCounter][Local_U8_ColCounter];
    201e:	c2 01       	movw	r24, r4
    2020:	88 0f       	add	r24, r24
    2022:	99 1f       	adc	r25, r25
    2024:	88 0f       	add	r24, r24
    2026:	99 1f       	adc	r25, r25
    2028:	e1 e0       	ldi	r30, 0x01	; 1
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	ec 0f       	add	r30, r28
    202e:	fd 1f       	adc	r31, r29
    2030:	e8 0f       	add	r30, r24
    2032:	f9 1f       	adc	r31, r25
    2034:	e8 0d       	add	r30, r8
    2036:	f9 1d       	adc	r31, r9
    2038:	80 85       	ldd	r24, Z+8	; 0x08
    203a:	89 8f       	std	Y+25, r24	; 0x19
    203c:	07 c0       	rjmp	.+14     	; 0x204c <H_KeyPad_U8_KeyPadRead+0x106>
					break;
    203e:	08 94       	sec
    2040:	e1 1c       	adc	r14, r1
    2042:	f1 1c       	adc	r15, r1
	u8 Local_U8_RowCounter = 0;
	u8 Local_U8_ColCounter = 0;
	for(Local_U8_RowCounter = 0 ; Local_U8_RowCounter <= 3 ; Local_U8_RowCounter++)
	{
		M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],LOW);
		for(Local_U8_ColCounter = 0 ; Local_U8_ColCounter <= 3 ; Local_U8_ColCounter++)
    2044:	84 e0       	ldi	r24, 0x04	; 4
    2046:	e8 16       	cp	r14, r24
    2048:	f1 04       	cpc	r15, r1
    204a:	71 f6       	brne	.-100    	; 0x1fe8 <H_KeyPad_U8_KeyPadRead+0xa2>
					break;
				}

			}
		}
		M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],HIGH);
    204c:	8c 2d       	mov	r24, r12
    204e:	61 e0       	ldi	r22, 0x01	; 1
    2050:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
    2054:	08 94       	sec
    2056:	a1 1c       	adc	r10, r1
    2058:	b1 1c       	adc	r11, r1
							          { 'C' , '0' , '=' , '/' }};
#endif
	u8 Local_U8_Reading    = KEYPAD_RELEASED;
	u8 Local_U8_RowCounter = 0;
	u8 Local_U8_ColCounter = 0;
	for(Local_U8_RowCounter = 0 ; Local_U8_RowCounter <= 3 ; Local_U8_RowCounter++)
    205a:	84 e0       	ldi	r24, 0x04	; 4
    205c:	a8 16       	cp	r10, r24
    205e:	b1 04       	cpc	r11, r1
    2060:	09 f0       	breq	.+2      	; 0x2064 <H_KeyPad_U8_KeyPadRead+0x11e>
    2062:	b4 cf       	rjmp	.-152    	; 0x1fcc <H_KeyPad_U8_KeyPadRead+0x86>
			}
		}
		M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],HIGH);
	}
return Local_U8_Reading;
}
    2064:	89 8d       	ldd	r24, Y+25	; 0x19
    2066:	69 96       	adiw	r28, 0x19	; 25
    2068:	0f b6       	in	r0, 0x3f	; 63
    206a:	f8 94       	cli
    206c:	de bf       	out	0x3e, r29	; 62
    206e:	0f be       	out	0x3f, r0	; 63
    2070:	cd bf       	out	0x3d, r28	; 61
    2072:	cf 91       	pop	r28
    2074:	df 91       	pop	r29
    2076:	1f 91       	pop	r17
    2078:	0f 91       	pop	r16
    207a:	ff 90       	pop	r15
    207c:	ef 90       	pop	r14
    207e:	df 90       	pop	r13
    2080:	cf 90       	pop	r12
    2082:	bf 90       	pop	r11
    2084:	af 90       	pop	r10
    2086:	9f 90       	pop	r9
    2088:	8f 90       	pop	r8
    208a:	7f 90       	pop	r7
    208c:	6f 90       	pop	r6
    208e:	5f 90       	pop	r5
    2090:	4f 90       	pop	r4
    2092:	3f 90       	pop	r3
    2094:	2f 90       	pop	r2
    2096:	08 95       	ret

00002098 <H_KeyPad_Void_KeyPadInit>:
/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
void H_KeyPad_Void_KeyPadInit(void)
{
	M_DIO_Void_SetPinDirection(KEYPAD_R0_PIN,OUTPUT);
    2098:	83 e2       	ldi	r24, 0x23	; 35
    209a:	61 e0       	ldi	r22, 0x01	; 1
    209c:	0e 94 b0 08 	call	0x1160	; 0x1160 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R1_PIN,OUTPUT);
    20a0:	82 e2       	ldi	r24, 0x22	; 34
    20a2:	61 e0       	ldi	r22, 0x01	; 1
    20a4:	0e 94 b0 08 	call	0x1160	; 0x1160 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R2_PIN,OUTPUT);
    20a8:	81 e2       	ldi	r24, 0x21	; 33
    20aa:	61 e0       	ldi	r22, 0x01	; 1
    20ac:	0e 94 b0 08 	call	0x1160	; 0x1160 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R3_PIN,OUTPUT);
    20b0:	80 e2       	ldi	r24, 0x20	; 32
    20b2:	61 e0       	ldi	r22, 0x01	; 1
    20b4:	0e 94 b0 08 	call	0x1160	; 0x1160 <M_DIO_Void_SetPinDirection>

	M_DIO_Void_SetPinValue(KEYPAD_R0_PIN,HIGH);
    20b8:	83 e2       	ldi	r24, 0x23	; 35
    20ba:	61 e0       	ldi	r22, 0x01	; 1
    20bc:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R1_PIN,HIGH);
    20c0:	82 e2       	ldi	r24, 0x22	; 34
    20c2:	61 e0       	ldi	r22, 0x01	; 1
    20c4:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R2_PIN,HIGH);
    20c8:	81 e2       	ldi	r24, 0x21	; 33
    20ca:	61 e0       	ldi	r22, 0x01	; 1
    20cc:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R3_PIN,HIGH);
    20d0:	80 e2       	ldi	r24, 0x20	; 32
    20d2:	61 e0       	ldi	r22, 0x01	; 1
    20d4:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinDirection(KEYPAD_C0_PIN,INPUT);
    20d8:	8f e2       	ldi	r24, 0x2F	; 47
    20da:	60 e0       	ldi	r22, 0x00	; 0
    20dc:	0e 94 b0 08 	call	0x1160	; 0x1160 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C1_PIN,INPUT);
    20e0:	8e e2       	ldi	r24, 0x2E	; 46
    20e2:	60 e0       	ldi	r22, 0x00	; 0
    20e4:	0e 94 b0 08 	call	0x1160	; 0x1160 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C2_PIN,INPUT);
    20e8:	8d e2       	ldi	r24, 0x2D	; 45
    20ea:	60 e0       	ldi	r22, 0x00	; 0
    20ec:	0e 94 b0 08 	call	0x1160	; 0x1160 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C3_PIN,INPUT);
    20f0:	8b e2       	ldi	r24, 0x2B	; 43
    20f2:	60 e0       	ldi	r22, 0x00	; 0
    20f4:	0e 94 b0 08 	call	0x1160	; 0x1160 <M_DIO_Void_SetPinDirection>
}
    20f8:	08 95       	ret

000020fa <H_EEPROM_U8_EEPROMRead>:

/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
u8   H_EEPROM_U8_EEPROMRead(u8 Copy_U8_PageNumber,u8 Copy_U8_ByteNumber)
{
    20fa:	0f 93       	push	r16
    20fc:	1f 93       	push	r17
    20fe:	18 2f       	mov	r17, r24
    2100:	06 2f       	mov	r16, r22
	u8 Local_U8_Data = 0;
	M_I2C_Void_StartCondition();
    2102:	0e 94 31 08 	call	0x1062	; 0x1062 <M_I2C_Void_StartCondition>
	M_I2C_Void_SendSlaveAddressWrite(EEPROM_MASK | Copy_U8_PageNumber);
    2106:	10 65       	ori	r17, 0x50	; 80
    2108:	81 2f       	mov	r24, r17
    210a:	0e 94 5e 08 	call	0x10bc	; 0x10bc <M_I2C_Void_SendSlaveAddressWrite>
	M_I2C_Void_SendByte(Copy_U8_ByteNumber);         /*   TO SEND BYTE NUMBER   */
    210e:	80 2f       	mov	r24, r16
    2110:	0e 94 84 08 	call	0x1108	; 0x1108 <M_I2C_Void_SendByte>
	M_I2C_Void_RepeatedStart();
    2114:	0e 94 4c 08 	call	0x1098	; 0x1098 <M_I2C_Void_RepeatedStart>
	M_I2C_Void_SendSlaveAddressRead(EEPROM_MASK | Copy_U8_PageNumber);
    2118:	81 2f       	mov	r24, r17
    211a:	0e 94 6f 08 	call	0x10de	; 0x10de <M_I2C_Void_SendSlaveAddressRead>
	Local_U8_Data = M_I2C_U8_ReadByte();
    211e:	0e 94 97 08 	call	0x112e	; 0x112e <M_I2C_U8_ReadByte>
    2122:	18 2f       	mov	r17, r24
	M_I2C_Void_StopCondition();
    2124:	0e 94 43 08 	call	0x1086	; 0x1086 <M_I2C_Void_StopCondition>
	return Local_U8_Data;
}
    2128:	81 2f       	mov	r24, r17
    212a:	1f 91       	pop	r17
    212c:	0f 91       	pop	r16
    212e:	08 95       	ret

00002130 <H_EEPROM_Void_EEPROMWrite>:

/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
void H_EEPROM_Void_EEPROMWrite(u8 Copy_U8_PageNumber,u8 Copy_U8_ByteNumber,u8 Copy_U8_Data)
{
    2130:	ff 92       	push	r15
    2132:	0f 93       	push	r16
    2134:	1f 93       	push	r17
    2136:	18 2f       	mov	r17, r24
    2138:	06 2f       	mov	r16, r22
    213a:	f4 2e       	mov	r15, r20
	M_I2C_Void_StartCondition();
    213c:	0e 94 31 08 	call	0x1062	; 0x1062 <M_I2C_Void_StartCondition>
	M_I2C_Void_SendSlaveAddressWrite(EEPROM_MASK | Copy_U8_PageNumber);
    2140:	81 2f       	mov	r24, r17
    2142:	80 65       	ori	r24, 0x50	; 80
    2144:	0e 94 5e 08 	call	0x10bc	; 0x10bc <M_I2C_Void_SendSlaveAddressWrite>
	M_I2C_Void_SendByte(Copy_U8_ByteNumber);         /*   TO SEND BYTE NUMBER   */
    2148:	80 2f       	mov	r24, r16
    214a:	0e 94 84 08 	call	0x1108	; 0x1108 <M_I2C_Void_SendByte>
	M_I2C_Void_SendByte(Copy_U8_Data);               /*   TO SEND DATA          */
    214e:	8f 2d       	mov	r24, r15
    2150:	0e 94 84 08 	call	0x1108	; 0x1108 <M_I2C_Void_SendByte>
	M_I2C_Void_StopCondition();
    2154:	0e 94 43 08 	call	0x1086	; 0x1086 <M_I2C_Void_StopCondition>
}
    2158:	1f 91       	pop	r17
    215a:	0f 91       	pop	r16
    215c:	ff 90       	pop	r15
    215e:	08 95       	ret

00002160 <H_EEPROM_Void_EEPROMInit>:
/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
void H_EEPROM_Void_EEPROMInit(void)
{
	M_I2C_Void_I2CInit();
    2160:	0e 94 29 08 	call	0x1052	; 0x1052 <M_I2C_Void_I2CInit>
    2164:	28 e8       	ldi	r18, 0x88	; 136
    2166:	33 e1       	ldi	r19, 0x13	; 19
    2168:	40 e9       	ldi	r20, 0x90	; 144
    216a:	51 e0       	ldi	r21, 0x01	; 1
    216c:	ca 01       	movw	r24, r20
    216e:	01 97       	sbiw	r24, 0x01	; 1
    2170:	f1 f7       	brne	.-4      	; 0x216e <H_EEPROM_Void_EEPROMInit+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2172:	21 50       	subi	r18, 0x01	; 1
    2174:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2176:	d1 f7       	brne	.-12     	; 0x216c <H_EEPROM_Void_EEPROMInit+0xc>
	_delay_ms(500);
}
    2178:	08 95       	ret

0000217a <H_Buzzer_Void_BuzzerTwice>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerTwice(void)
{
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
    217a:	84 e2       	ldi	r24, 0x24	; 36
    217c:	61 e0       	ldi	r22, 0x01	; 1
    217e:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
    2182:	20 e2       	ldi	r18, 0x20	; 32
    2184:	33 e0       	ldi	r19, 0x03	; 3
    2186:	40 e9       	ldi	r20, 0x90	; 144
    2188:	51 e0       	ldi	r21, 0x01	; 1
    218a:	ca 01       	movw	r24, r20
    218c:	01 97       	sbiw	r24, 0x01	; 1
    218e:	f1 f7       	brne	.-4      	; 0x218c <H_Buzzer_Void_BuzzerTwice+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2190:	21 50       	subi	r18, 0x01	; 1
    2192:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2194:	d1 f7       	brne	.-12     	; 0x218a <H_Buzzer_Void_BuzzerTwice+0x10>
	_delay_ms(BUZZER_ON_TIME);
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
    2196:	84 e2       	ldi	r24, 0x24	; 36
    2198:	60 e0       	ldi	r22, 0x00	; 0
    219a:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
    219e:	28 e5       	ldi	r18, 0x58	; 88
    21a0:	32 e0       	ldi	r19, 0x02	; 2
    21a2:	40 e9       	ldi	r20, 0x90	; 144
    21a4:	51 e0       	ldi	r21, 0x01	; 1
    21a6:	ca 01       	movw	r24, r20
    21a8:	01 97       	sbiw	r24, 0x01	; 1
    21aa:	f1 f7       	brne	.-4      	; 0x21a8 <H_Buzzer_Void_BuzzerTwice+0x2e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ac:	21 50       	subi	r18, 0x01	; 1
    21ae:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b0:	d1 f7       	brne	.-12     	; 0x21a6 <H_Buzzer_Void_BuzzerTwice+0x2c>
	_delay_ms(BUZZER_OFF_TIME);
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
    21b2:	84 e2       	ldi	r24, 0x24	; 36
    21b4:	61 e0       	ldi	r22, 0x01	; 1
    21b6:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
    21ba:	20 e2       	ldi	r18, 0x20	; 32
    21bc:	33 e0       	ldi	r19, 0x03	; 3
    21be:	40 e9       	ldi	r20, 0x90	; 144
    21c0:	51 e0       	ldi	r21, 0x01	; 1
    21c2:	ca 01       	movw	r24, r20
    21c4:	01 97       	sbiw	r24, 0x01	; 1
    21c6:	f1 f7       	brne	.-4      	; 0x21c4 <H_Buzzer_Void_BuzzerTwice+0x4a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c8:	21 50       	subi	r18, 0x01	; 1
    21ca:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21cc:	d1 f7       	brne	.-12     	; 0x21c2 <H_Buzzer_Void_BuzzerTwice+0x48>
	_delay_ms(BUZZER_ON_TIME);
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
    21ce:	84 e2       	ldi	r24, 0x24	; 36
    21d0:	60 e0       	ldi	r22, 0x00	; 0
    21d2:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
}
    21d6:	08 95       	ret

000021d8 <H_Buzzer_Void_BuzzerOnce>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerOnce(void)
{
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
    21d8:	84 e2       	ldi	r24, 0x24	; 36
    21da:	61 e0       	ldi	r22, 0x01	; 1
    21dc:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
    21e0:	20 e2       	ldi	r18, 0x20	; 32
    21e2:	33 e0       	ldi	r19, 0x03	; 3
    21e4:	40 e9       	ldi	r20, 0x90	; 144
    21e6:	51 e0       	ldi	r21, 0x01	; 1
    21e8:	ca 01       	movw	r24, r20
    21ea:	01 97       	sbiw	r24, 0x01	; 1
    21ec:	f1 f7       	brne	.-4      	; 0x21ea <H_Buzzer_Void_BuzzerOnce+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ee:	21 50       	subi	r18, 0x01	; 1
    21f0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f2:	d1 f7       	brne	.-12     	; 0x21e8 <H_Buzzer_Void_BuzzerOnce+0x10>
	_delay_ms(BUZZER_ON_TIME);
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
    21f4:	84 e2       	ldi	r24, 0x24	; 36
    21f6:	60 e0       	ldi	r22, 0x00	; 0
    21f8:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
}
    21fc:	08 95       	ret

000021fe <H_Buzzer_Void_BuzzerOff>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerOff(void)
{
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
    21fe:	84 e2       	ldi	r24, 0x24	; 36
    2200:	60 e0       	ldi	r22, 0x00	; 0
    2202:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
}
    2206:	08 95       	ret

00002208 <H_Buzzer_Void_BuzzerOn>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerOn(void)
{
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
    2208:	84 e2       	ldi	r24, 0x24	; 36
    220a:	61 e0       	ldi	r22, 0x01	; 1
    220c:	0e 94 45 09 	call	0x128a	; 0x128a <M_DIO_Void_SetPinValue>
}
    2210:	08 95       	ret

00002212 <H_Buzzer_Void_BuzzerTog>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerTog(void)
{
	M_DIO_Void_TogPin(BUZZER_PIN);
    2212:	84 e2       	ldi	r24, 0x24	; 36
    2214:	0e 94 13 0a 	call	0x1426	; 0x1426 <M_DIO_Void_TogPin>
}
    2218:	08 95       	ret

0000221a <H_Buzzer_Void_BuzzerInit>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerInit(void)
{
	M_DIO_Void_SetPinDirection(BUZZER_PIN,OUTPUT);
    221a:	84 e2       	ldi	r24, 0x24	; 36
    221c:	61 e0       	ldi	r22, 0x01	; 1
    221e:	0e 94 b0 08 	call	0x1160	; 0x1160 <M_DIO_Void_SetPinDirection>
}
    2222:	08 95       	ret

00002224 <A_Timer0Excution>:


void A_Timer0Excution(void)
{

}
    2224:	08 95       	ret

00002226 <main>:
#include "Projects_Interface.h"

void A_Timer0Excution(void);

int main()
{
    2226:	ef 92       	push	r14
    2228:	ff 92       	push	r15
    222a:	1f 93       	push	r17
    222c:	cf 93       	push	r28
    222e:	df 93       	push	r29
	H_EEPROM_Void_EEPROMInit();
    2230:	0e 94 b0 10 	call	0x2160	; 0x2160 <H_EEPROM_Void_EEPROMInit>
	H_Lcd_Void_LCDInit();
    2234:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <H_Lcd_Void_LCDInit>
	u8 x = H_EEPROM_U8_EEPROMRead(0,0);
    2238:	80 e0       	ldi	r24, 0x00	; 0
    223a:	60 e0       	ldi	r22, 0x00	; 0
    223c:	0e 94 7d 10 	call	0x20fa	; 0x20fa <H_EEPROM_U8_EEPROMRead>
    2240:	18 2f       	mov	r17, r24
	while(1)
	{
		H_Lcd_Void_LCDWriteNumber(x);
    2242:	0f 2e       	mov	r0, r31
    2244:	f0 e7       	ldi	r31, 0x70	; 112
    2246:	ef 2e       	mov	r14, r31
    2248:	f7 e1       	ldi	r31, 0x17	; 23
    224a:	ff 2e       	mov	r15, r31
    224c:	f0 2d       	mov	r31, r0
    224e:	c0 e9       	ldi	r28, 0x90	; 144
    2250:	d1 e0       	ldi	r29, 0x01	; 1
    2252:	61 2f       	mov	r22, r17
    2254:	70 e0       	ldi	r23, 0x00	; 0
    2256:	80 e0       	ldi	r24, 0x00	; 0
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <H_Lcd_Void_LCDWriteNumber>
    225e:	97 01       	movw	r18, r14
    2260:	ce 01       	movw	r24, r28
    2262:	01 97       	sbiw	r24, 0x01	; 1
    2264:	f1 f7       	brne	.-4      	; 0x2262 <main+0x3c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2266:	21 50       	subi	r18, 0x01	; 1
    2268:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    226a:	d1 f7       	brne	.-12     	; 0x2260 <main+0x3a>
		_delay_ms(600);
		x++;
    226c:	1f 5f       	subi	r17, 0xFF	; 255
		H_EEPROM_Void_EEPROMWrite(0,0,x);
    226e:	80 e0       	ldi	r24, 0x00	; 0
    2270:	60 e0       	ldi	r22, 0x00	; 0
    2272:	41 2f       	mov	r20, r17
    2274:	0e 94 98 10 	call	0x2130	; 0x2130 <H_EEPROM_Void_EEPROMWrite>
		H_Lcd_Void_LCDClear();
    2278:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <H_Lcd_Void_LCDClear>
    227c:	ea cf       	rjmp	.-44     	; 0x2252 <main+0x2c>

0000227e <__mulsi3>:
    227e:	62 9f       	mul	r22, r18
    2280:	d0 01       	movw	r26, r0
    2282:	73 9f       	mul	r23, r19
    2284:	f0 01       	movw	r30, r0
    2286:	82 9f       	mul	r24, r18
    2288:	e0 0d       	add	r30, r0
    228a:	f1 1d       	adc	r31, r1
    228c:	64 9f       	mul	r22, r20
    228e:	e0 0d       	add	r30, r0
    2290:	f1 1d       	adc	r31, r1
    2292:	92 9f       	mul	r25, r18
    2294:	f0 0d       	add	r31, r0
    2296:	83 9f       	mul	r24, r19
    2298:	f0 0d       	add	r31, r0
    229a:	74 9f       	mul	r23, r20
    229c:	f0 0d       	add	r31, r0
    229e:	65 9f       	mul	r22, r21
    22a0:	f0 0d       	add	r31, r0
    22a2:	99 27       	eor	r25, r25
    22a4:	72 9f       	mul	r23, r18
    22a6:	b0 0d       	add	r27, r0
    22a8:	e1 1d       	adc	r30, r1
    22aa:	f9 1f       	adc	r31, r25
    22ac:	63 9f       	mul	r22, r19
    22ae:	b0 0d       	add	r27, r0
    22b0:	e1 1d       	adc	r30, r1
    22b2:	f9 1f       	adc	r31, r25
    22b4:	bd 01       	movw	r22, r26
    22b6:	cf 01       	movw	r24, r30
    22b8:	11 24       	eor	r1, r1
    22ba:	08 95       	ret

000022bc <__udivmodqi4>:
    22bc:	99 1b       	sub	r25, r25
    22be:	79 e0       	ldi	r23, 0x09	; 9
    22c0:	04 c0       	rjmp	.+8      	; 0x22ca <__udivmodqi4_ep>

000022c2 <__udivmodqi4_loop>:
    22c2:	99 1f       	adc	r25, r25
    22c4:	96 17       	cp	r25, r22
    22c6:	08 f0       	brcs	.+2      	; 0x22ca <__udivmodqi4_ep>
    22c8:	96 1b       	sub	r25, r22

000022ca <__udivmodqi4_ep>:
    22ca:	88 1f       	adc	r24, r24
    22cc:	7a 95       	dec	r23
    22ce:	c9 f7       	brne	.-14     	; 0x22c2 <__udivmodqi4_loop>
    22d0:	80 95       	com	r24
    22d2:	08 95       	ret

000022d4 <__udivmodsi4>:
    22d4:	a1 e2       	ldi	r26, 0x21	; 33
    22d6:	1a 2e       	mov	r1, r26
    22d8:	aa 1b       	sub	r26, r26
    22da:	bb 1b       	sub	r27, r27
    22dc:	fd 01       	movw	r30, r26
    22de:	0d c0       	rjmp	.+26     	; 0x22fa <__udivmodsi4_ep>

000022e0 <__udivmodsi4_loop>:
    22e0:	aa 1f       	adc	r26, r26
    22e2:	bb 1f       	adc	r27, r27
    22e4:	ee 1f       	adc	r30, r30
    22e6:	ff 1f       	adc	r31, r31
    22e8:	a2 17       	cp	r26, r18
    22ea:	b3 07       	cpc	r27, r19
    22ec:	e4 07       	cpc	r30, r20
    22ee:	f5 07       	cpc	r31, r21
    22f0:	20 f0       	brcs	.+8      	; 0x22fa <__udivmodsi4_ep>
    22f2:	a2 1b       	sub	r26, r18
    22f4:	b3 0b       	sbc	r27, r19
    22f6:	e4 0b       	sbc	r30, r20
    22f8:	f5 0b       	sbc	r31, r21

000022fa <__udivmodsi4_ep>:
    22fa:	66 1f       	adc	r22, r22
    22fc:	77 1f       	adc	r23, r23
    22fe:	88 1f       	adc	r24, r24
    2300:	99 1f       	adc	r25, r25
    2302:	1a 94       	dec	r1
    2304:	69 f7       	brne	.-38     	; 0x22e0 <__udivmodsi4_loop>
    2306:	60 95       	com	r22
    2308:	70 95       	com	r23
    230a:	80 95       	com	r24
    230c:	90 95       	com	r25
    230e:	9b 01       	movw	r18, r22
    2310:	ac 01       	movw	r20, r24
    2312:	bd 01       	movw	r22, r26
    2314:	cf 01       	movw	r24, r30
    2316:	08 95       	ret

00002318 <__divmodsi4>:
    2318:	97 fb       	bst	r25, 7
    231a:	09 2e       	mov	r0, r25
    231c:	05 26       	eor	r0, r21
    231e:	0e d0       	rcall	.+28     	; 0x233c <__divmodsi4_neg1>
    2320:	57 fd       	sbrc	r21, 7
    2322:	04 d0       	rcall	.+8      	; 0x232c <__divmodsi4_neg2>
    2324:	d7 df       	rcall	.-82     	; 0x22d4 <__udivmodsi4>
    2326:	0a d0       	rcall	.+20     	; 0x233c <__divmodsi4_neg1>
    2328:	00 1c       	adc	r0, r0
    232a:	38 f4       	brcc	.+14     	; 0x233a <__divmodsi4_exit>

0000232c <__divmodsi4_neg2>:
    232c:	50 95       	com	r21
    232e:	40 95       	com	r20
    2330:	30 95       	com	r19
    2332:	21 95       	neg	r18
    2334:	3f 4f       	sbci	r19, 0xFF	; 255
    2336:	4f 4f       	sbci	r20, 0xFF	; 255
    2338:	5f 4f       	sbci	r21, 0xFF	; 255

0000233a <__divmodsi4_exit>:
    233a:	08 95       	ret

0000233c <__divmodsi4_neg1>:
    233c:	f6 f7       	brtc	.-4      	; 0x233a <__divmodsi4_exit>
    233e:	90 95       	com	r25
    2340:	80 95       	com	r24
    2342:	70 95       	com	r23
    2344:	61 95       	neg	r22
    2346:	7f 4f       	sbci	r23, 0xFF	; 255
    2348:	8f 4f       	sbci	r24, 0xFF	; 255
    234a:	9f 4f       	sbci	r25, 0xFF	; 255
    234c:	08 95       	ret

0000234e <__prologue_saves__>:
    234e:	2f 92       	push	r2
    2350:	3f 92       	push	r3
    2352:	4f 92       	push	r4
    2354:	5f 92       	push	r5
    2356:	6f 92       	push	r6
    2358:	7f 92       	push	r7
    235a:	8f 92       	push	r8
    235c:	9f 92       	push	r9
    235e:	af 92       	push	r10
    2360:	bf 92       	push	r11
    2362:	cf 92       	push	r12
    2364:	df 92       	push	r13
    2366:	ef 92       	push	r14
    2368:	ff 92       	push	r15
    236a:	0f 93       	push	r16
    236c:	1f 93       	push	r17
    236e:	cf 93       	push	r28
    2370:	df 93       	push	r29
    2372:	cd b7       	in	r28, 0x3d	; 61
    2374:	de b7       	in	r29, 0x3e	; 62
    2376:	ca 1b       	sub	r28, r26
    2378:	db 0b       	sbc	r29, r27
    237a:	0f b6       	in	r0, 0x3f	; 63
    237c:	f8 94       	cli
    237e:	de bf       	out	0x3e, r29	; 62
    2380:	0f be       	out	0x3f, r0	; 63
    2382:	cd bf       	out	0x3d, r28	; 61
    2384:	09 94       	ijmp

00002386 <__epilogue_restores__>:
    2386:	2a 88       	ldd	r2, Y+18	; 0x12
    2388:	39 88       	ldd	r3, Y+17	; 0x11
    238a:	48 88       	ldd	r4, Y+16	; 0x10
    238c:	5f 84       	ldd	r5, Y+15	; 0x0f
    238e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2390:	7d 84       	ldd	r7, Y+13	; 0x0d
    2392:	8c 84       	ldd	r8, Y+12	; 0x0c
    2394:	9b 84       	ldd	r9, Y+11	; 0x0b
    2396:	aa 84       	ldd	r10, Y+10	; 0x0a
    2398:	b9 84       	ldd	r11, Y+9	; 0x09
    239a:	c8 84       	ldd	r12, Y+8	; 0x08
    239c:	df 80       	ldd	r13, Y+7	; 0x07
    239e:	ee 80       	ldd	r14, Y+6	; 0x06
    23a0:	fd 80       	ldd	r15, Y+5	; 0x05
    23a2:	0c 81       	ldd	r16, Y+4	; 0x04
    23a4:	1b 81       	ldd	r17, Y+3	; 0x03
    23a6:	aa 81       	ldd	r26, Y+2	; 0x02
    23a8:	b9 81       	ldd	r27, Y+1	; 0x01
    23aa:	ce 0f       	add	r28, r30
    23ac:	d1 1d       	adc	r29, r1
    23ae:	0f b6       	in	r0, 0x3f	; 63
    23b0:	f8 94       	cli
    23b2:	de bf       	out	0x3e, r29	; 62
    23b4:	0f be       	out	0x3f, r0	; 63
    23b6:	cd bf       	out	0x3d, r28	; 61
    23b8:	ed 01       	movw	r28, r26
    23ba:	08 95       	ret

000023bc <_exit>:
    23bc:	f8 94       	cli

000023be <__stop_program>:
    23be:	ff cf       	rjmp	.-2      	; 0x23be <__stop_program>
